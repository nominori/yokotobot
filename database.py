import sqlite3
import random
from time import strftime
from datetime import datetime

photos = [1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
          1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209,
          2001, 2002, 2003, 2004, 2005, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2201, 2202, 2203, 2204, 2205,
          2206, 2301, 2302, 2303, 2401, 2402, 2403, 3101, 3102, 3201, 3202, 3301, 3302, 3401, 3402, 4500, 4600, 4700]
types = {'1': '–ó–≤–∏—á–∞–π–Ω–∏–πüíô', '2': '–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°', '3': '–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú', '4': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π‚ù§Ô∏è'}
classes = {'0': '–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫', '1': '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫', '2': '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫', '3': '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫',
           '4': '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω', '5': '–ö—ñ—Ç–∏–∫ –≤–∞–º–ø—ñ—Ä', '6': '–ö—ñ—Ç–∏–∫ –∫–æ–º—É–Ω—ñ—Å—Ç', '7': '–ù–∞—Ä–∫—ñ—Ç'}
kitten_photos = ['k1', 'k2', 'k3', 'k4']
kitten_types = {'–ó–≤–∏—á–∞–π–Ω–∏–πüíô'+'–ó–≤–∏—á–∞–π–Ω–∏–πüíô': ['–ó–≤–∏—á–∞–π–Ω–∏–πüíô'],
                '–ó–≤–∏—á–∞–π–Ω–∏–πüíô'+'–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°': ['–ó–≤–∏—á–∞–π–Ω–∏–πüíô', '–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°'],
                '–ó–≤–∏—á–∞–π–Ω–∏–πüíô'+'–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú': ['–ó–≤–∏—á–∞–π–Ω–∏–πüíô', '–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°', '–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°', '–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú'],
                '–ó–≤–∏—á–∞–π–Ω–∏–πüíô'+'–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π‚ù§Ô∏è': ['–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°', '–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú'],
                '–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°'+'–ó–≤–∏—á–∞–π–Ω–∏–πüíô': ['–ó–≤–∏—á–∞–π–Ω–∏–πüíô', '–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°'],
                '–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°'+'–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°': ['–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°'],
                '–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°'+'–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π‚ù§Ô∏è': ['–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°', '–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú', '–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π‚ù§Ô∏è'],
                '–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú'+'–ó–≤–∏—á–∞–π–Ω–∏–πüíô': ['–ó–≤–∏—á–∞–π–Ω–∏–πüíô', '–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°', '–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°', '–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú'],
                '–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú'+'–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°': ['–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°', '–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú'],
                '–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú'+'–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú': ['–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú'],
                '–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú'+'–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π‚ù§Ô∏è': ['–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π‚ù§Ô∏è'],
                '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π‚ù§Ô∏è'+'–ó–≤–∏—á–∞–π–Ω–∏–πüíô': ['–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°', '–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú'],
                '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π‚ù§Ô∏è'+'–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°': ['–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°', '–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú', '–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π‚ù§Ô∏è'],
                '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π‚ù§Ô∏è'+'–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú': ['–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π‚ù§Ô∏è'],
                '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π‚ù§Ô∏è'+'–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π‚ù§Ô∏è': ['–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π‚ù§Ô∏è']}
apartment_photos = ['a1', 'a2', 'a3', 'a4']
apartment_types = ['–ú–µ–≥–∞–ø–æ–ª—ñ—Å', '–°—Ç–æ–ª–∏—Ü—è', '–ú–∞–ª–µ–Ω—å–∫–µ –º—ñ—Å—Ç–µ—á–∫–æ', '–ë–µ—Ä–µ–≥ –º–æ—Ä—è']


def time_list(user_time: str, target: str):
    times = []
    if target == "hungry":
        times = [f"{i}:" + user_time[3:] for i in range(24)]
    elif target == "job":
        times = [f"{i}:" + user_time[3:] for i in range(24)]
    elif target == "feed":
        times = [f"{int(user_time[:2]) + 2 * i}:" + user_time[3:] for i in range(12)]
    elif target in ["wanna_play", "not_doing"]:
        times = [f"{int(user_time[:2]) + 2 * i}:" + user_time[3:] for i in range(12)]
    elif target == "working":
        return f"{int(user_time[:2]) + 4}:" + user_time[3:]
    for i in range(len(times)):
        if times[i][2] != ':':
            times[i] = "0" + times[i]
        if int(times[i][:2]) > 23:
            times[i] = str(int(times[i][:2]) - 24) + times[i][2:]
            if times[i][2] != ':':
                times[i] = "0" + times[i]
        times[i] = times[i] + ':00'
    return times


class Database:
    def __init__(self):
        self.conn = sqlite3.connect('database.db')
        self.c = self.conn.cursor()

    async def init_db(self, force: bool = False):
        if force:
            self.c.execute('DROP TABLE IF EXISTS user_data')
            self.c.execute('DROP TABLE IF EXISTS job_data')
            self.c.execute('DROP TABLE IF EXISTS kittens_data')
            self.c.execute('DROP TABLE IF EXISTS apartment_data')
            self.c.execute('DROP TABLE IF EXISTS time_data')
        self.c.execute('''
            CREATE TABLE IF NOT EXISTS user_data (
                id          INTEGER PRIMARY KEY,
                user_id     INTEGER NOT NULL,
                chat_id     INTEGER NOT NULL,
                photo       TEXT    NOT NULL,
                name        TEXT    NOT NULL DEFAULT '–í–∞—à –ö—ñ—Ç–∏–∫',
                level       TEXT    NOT NULL DEFAULT '–ö–æ—à–µ–Ω—è—Ç–∫–æ',
                under_level INTEGER NOT NULL DEFAULT 1,
                type        TEXT    NOT NULL,
                class       TEXT    NOT NULL,
                hungry      INTEGER NOT NULL DEFAULT 50,
                feed_limit  INTEGER NOT NULL DEFAULT 3,
                wanna_play  TEXT    NOT NULL,
                not_play_times   INTEGER NOT NULL DEFAULT 0,
                happiness   INTEGER NOT NULL DEFAULT 50,
                zero_times  INTEGER NOT NULL DEFAULT 0,
                health      TEXT    NOT NULL DEFAULT '–ó–¥–æ—Ä–æ–≤',
                money       INTEGER NOT NULL DEFAULT 0,
                command     TEXT    NOT NULL DEFAULT '',
                command_user2_id    INTEGER NOT NULL DEFAULT 0,
                name_sets   INTEGER NOT NULL DEFAULT 4,
                kill_ever   INTEGER NOT NULL DEFAULT 0,
                reborn      INTEGER NOT NULL DEFAULT 0,
                married     INTEGER NOT NULL DEFAULT 0,
                user2_id    INTEGER NOT NULL DEFAULT 0
            )
        ''')
        self.c.execute('''
            CREATE TABLE IF NOT EXISTS job_data (
                id          INTEGER PRIMARY KEY,
                user_id     INTEGER NOT NULL,
                chat_id     INTEGER NOT NULL,
                job         TEXT    NOT NULL DEFAULT '–ù–µ–º–∞',
                job_status  TEXT    NOT NULL DEFAULT '–ù–µ –ø—Ä–∞—Ü—é—î',
                job_hours   INTEGER NOT NULL DEFAULT 0,
                job_changes INTEGER NOT NULL DEFAULT 0,
                vacation    INTEGER NOT NULL DEFAULT 0,
                vacation_place    TEXT    NOT NULL DEFAULT '',
                vacation_hours   INTEGER NOT NULL DEFAULT 0
            )
        ''')
        self.c.execute('''
            CREATE TABLE IF NOT EXISTS kittens_data (
                id          INTEGER PRIMARY KEY,
                chat_id     INTEGER NOT NULL,
                user_id     INTEGER NOT NULL,
                user2_id    INTEGER NOT NULL,
                number      INTEGER NOT NULL,
                photo       TEXT    NOT NULL,
                level       INTEGER    NOT NULL DEFAULT 1,
                type        TEXT    NOT NULL
            )
        ''')
        self.c.execute('''
            CREATE TABLE IF NOT EXISTS apartment_data (
                id          INTEGER PRIMARY KEY,
                user_id     INTEGER NOT NULL,
                chat_id     INTEGER NOT NULL,
                photo       TEXT NOT NULL,
                user1_id    INTEGER NOT NULL DEFAULT 0,
                user2_id    INTEGER NOT NULL DEFAULT 0,
                user3_id    INTEGER NOT NULL DEFAULT 0,
                user4_id    INTEGER NOT NULL DEFAULT 0,
                user5_id    INTEGER NOT NULL DEFAULT 0,
                level       INTEGER    NOT NULL DEFAULT 1,
                type        TEXT NOT NULL
            )
        ''')
        self.c.execute('''
            CREATE TABLE IF NOT EXISTS time_data (
                id          INTEGER PRIMARY KEY,
                user_id     INTEGER NOT NULL,
                chat_id     INTEGER NOT NULL,
                create_time TEXT NOT NULL,
                feed_time   TEXT NOT NULL,
                job_time  TEXT NOT NULL DEFAULT ''
            )
        ''')
        self.conn.commit()

    def user_exist(self, user_id: int, chat_id: int):
        if self.c.execute("SELECT chat_id FROM user_data WHERE user_id = ? AND chat_id = ?",
                          (user_id, chat_id)).fetchone() is not None:
            return 1
        else:
            return 0

    async def add_user(self, user_id: int, chat_id: int):
        pict = str(random.choice(photos)) + '.jpg'
        play = random.choice(['–¢–∞–∫', '–ù—ñ'])
        self.c.execute("INSERT INTO user_data (user_id, chat_id, photo, type, class, wanna_play) "
                       "VALUES (?, ?, ?, ?, ?, ?)",
                       (user_id, chat_id, pict, types[pict[:1]], classes[pict[1:2]], play))
        self.c.execute("INSERT INTO job_data (user_id, chat_id) VALUES (?, ?)", (user_id, chat_id))
        self.c.execute("INSERT INTO time_data (user_id, chat_id, create_time, feed_time) VALUES (?, ?, ?, ?)",
                       (user_id, chat_id, strftime("%H:%M")+":00", strftime("%H:%M")+":00"))
        self.conn.commit()

    def name_exist(self, chat_id: int, name):
        max_id = self.c.execute("SELECT MAX(id) FROM user_data").fetchall()[0][0]
        for i in range(1, max_id + 1):
            if self.c.execute("SELECT name FROM user_data WHERE id = ? AND chat_id = ?",
                              (i, chat_id)).fetchone() is not None:
                if name == self.c.execute("SELECT name FROM user_data WHERE id = ? AND chat_id = ?",
                                          (i, chat_id)).fetchone()[0]:
                    return 1
        else:
            return 0

    async def set_name(self, user_id: int, chat_id: int, name):
        self.c.execute("UPDATE user_data SET name = ? WHERE user_id = ? AND chat_id = ?", (name, user_id, chat_id))
        name_sets = self.c.execute("SELECT name_sets FROM user_data WHERE user_id = ? AND chat_id = ?",
                                   (user_id, chat_id)).fetchone()[0]
        if name_sets != 0:
            name_sets = name_sets - 1
        self.c.execute("UPDATE user_data SET name_sets = ? WHERE user_id = ? AND chat_id = ?",
                       (name_sets, user_id, chat_id))
        self.conn.commit()

    async def change_feed(self, user_id: int, chat_id: int, target: str):
        feed_limit = self.c.execute("SELECT feed_limit FROM user_data WHERE user_id = ? AND chat_id = ?",
                                    (user_id, chat_id)).fetchone()[0]
        if target == '-' and feed_limit > 0:
            feed_limit = feed_limit - 1
            if feed_limit == 0:
                self.c.execute("UPDATE time_data SET feed_time = ? WHERE user_id = ? AND chat_id = ?",
                               (strftime("%H:%M")+":00", user_id, chat_id))
        elif target == '+':
            feed_limit = feed_limit + 1
        self.c.execute("UPDATE user_data SET feed_limit = ? WHERE user_id = ? AND chat_id = ?",
                       (feed_limit, user_id, chat_id))
        self.conn.commit()

    async def change_command(self, user_id: int, chat_id: int, command: str):
        self.c.execute("UPDATE user_data SET command = ? WHERE user_id = ? AND chat_id = ?",
                       (command, user_id, chat_id))
        self.conn.commit()

    async def change_command_user2_id(self, user_id: int, chat_id: int, user2_id: int):
        self.c.execute("UPDATE user_data SET command_user2_id = ? WHERE user_id = ? AND chat_id = ?",
                       (user2_id, user_id, chat_id))
        self.conn.commit()

    async def clear_command(self, user_id: int, chat_id: int):
        self.c.execute("UPDATE user_data SET command = ? WHERE user_id = ? AND chat_id = ?",
                       ('', user_id, chat_id))
        self.c.execute("UPDATE user_data SET command_user2_id = ? WHERE user_id = ? AND chat_id = ?",
                       (0, user_id, chat_id))
        self.conn.commit()

    async def kill(self, user_id: int, chat_id: int, command: str):
        if command == 'kill':
            self.c.execute("UPDATE user_data SET kill_ever = ? WHERE user_id = ? AND chat_id = ?",
                           (2, user_id, chat_id))
            self.c.execute("UPDATE user_data SET health = ? WHERE user_id = ? AND chat_id = ?",
                           ('–ú–µ—Ä—Ç–≤–∏–π', user_id, chat_id))
        elif command == 'wanted':
            self.c.execute("UPDATE user_data SET kill_ever = ? WHERE user_id = ? AND chat_id = ?",
                           (1, user_id, chat_id))
        self.conn.commit()

    async def reborn(self, user_id: int, chat_id: int):
        self.c.execute("UPDATE user_data SET health = ? WHERE user_id = ? AND chat_id = ?",
                       ('–ó–¥–æ—Ä–æ–≤', user_id, chat_id))
        self.c.execute("UPDATE user_data SET alive = ? WHERE user_id = ? AND chat_id = ?", (1, user_id, chat_id))
        self.c.execute("UPDATE user_data SET kill_ever = ? WHERE user_id = ? AND chat_id = ?", (4, user_id, chat_id))
        self.c.execute("UPDATE user_data SET zero_times = ? WHERE user_id = ? AND chat_id = ?", (0, user_id, chat_id))
        self.c.execute("UPDATE user_data SET hungry = ? WHERE user_id = ? AND chat_id = ?", (50, user_id, chat_id))
        self.c.execute("UPDATE user_data SET wanna_play = ? WHERE user_id = ? AND chat_id = ?",
                       ('–¢–∞–∫', user_id, chat_id))
        self.c.execute("UPDATE user_data SET not_play_times = ? WHERE user_id = ? AND chat_id = ?",
                       (0, user_id, chat_id))
        self.c.execute("UPDATE user_data SET money = ? WHERE user_id = ? AND chat_id = ?",
                       (0, user_id, chat_id))
        self.conn.commit()

    async def level_up(self, user_id: int, chat_id: int):
        under_level = self.c.execute("SELECT under_level FROM user_data WHERE user_id = ? AND chat_id = ?",
                                     (user_id, chat_id)).fetchone()[0]
        if under_level + 1 == 5:
            self.c.execute("UPDATE user_data SET level = ? WHERE user_id = ? AND chat_id = ?",
                           ('–ö—ñ—Ç', user_id, chat_id))
        elif under_level + 1 == 20:
            self.c.execute("UPDATE user_data SET level = ? WHERE user_id = ? AND chat_id = ?",
                           ('–°—É–ø–µ—Ä–∫—ñ—Ç', user_id, chat_id))
        elif under_level + 1 == 35:
            self.c.execute("UPDATE user_data SET level = ? WHERE user_id = ? AND chat_id = ?",
                           ('–ú—É–¥—Ä–∏–π –∫—ñ—Ç', user_id, chat_id))
            await self.change_job_changes(user_id, chat_id, '+')
        elif under_level + 1 in [15, 25, 45]:
            await self.change_job_changes(user_id, chat_id, '+')
        if under_level < 50:
            self.c.execute("UPDATE user_data SET under_level = ? WHERE user_id = ? AND chat_id = ?",
                           (under_level + 1, user_id, chat_id))
        self.conn.commit()

    async def change_happiness(self, user_id: int, chat_id: int, plus: int):
        happiness = self.c.execute("SELECT happiness FROM user_data WHERE user_id = ? AND chat_id = ?",
                                   (user_id, chat_id)).fetchone()[0]
        if happiness + plus >= 100:
            happiness = 100
        else:
            happiness = happiness + plus
        self.c.execute("UPDATE user_data SET happiness = ? WHERE user_id = ? AND chat_id = ?",
                       (happiness, user_id, chat_id))
        self.conn.commit()

    async def change_hungry(self, user_id: int, chat_id: int):
        hungry_plus = {'–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫': 15, '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫': 20, '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫': 16, '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫': 17,
                       '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω': 20, '–ö—ñ—Ç–∏–∫ –≤–∞–º–ø—ñ—Ä': 20, '–ö—ñ—Ç–∏–∫ –∫–æ–º—É–Ω—ñ—Å—Ç': 20, '–ù–∞—Ä–∫—ñ—Ç': 20}
        happiness = {'–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫': 5, '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫': 6, '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫': 5, '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫': 7,
                     '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω': 10, '–ö—ñ—Ç–∏–∫ –≤–∞–º–ø—ñ—Ä': 8, '–ö—ñ—Ç–∏–∫ –∫–æ–º—É–Ω—ñ—Å—Ç': 8, '–ù–∞—Ä–∫—ñ—Ç': 8}
        await self.change_feed(user_id, chat_id, '-')
        hungry = self.c.execute("SELECT hungry FROM user_data WHERE user_id = ? AND chat_id = ?",
                                (user_id, chat_id)).fetchone()[0]
        clas = self.c.execute("SELECT class FROM user_data WHERE user_id = ? AND chat_id = ?",
                              (user_id, chat_id)).fetchone()[0]
        if hungry + hungry_plus[clas] >= 100:
            hungry = 30
            await self.level_up(user_id, chat_id)
        else:
            hungry = hungry + hungry_plus[clas]
        self.c.execute("UPDATE user_data SET hungry = ? WHERE user_id = ? AND chat_id = ?", (hungry, user_id, chat_id))
        self.conn.commit()
        await self.change_happiness(user_id, chat_id, happiness[clas])

    async def change_wanna_play(self, user_id: int, chat_id: int):
        happiness = {'–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫': 20, '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫': 25, '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫': 20, '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫': 15,
                     '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω': 15, '–ö—ñ—Ç–∏–∫ –≤–∞–º–ø—ñ—Ä': 15, '–ö—ñ—Ç–∏–∫ –∫–æ–º—É–Ω—ñ—Å—Ç': 15, '–ù–∞—Ä–∫—ñ—Ç': 15}
        clas = self.c.execute("SELECT class FROM user_data WHERE user_id = ? AND chat_id = ?",
                              (user_id, chat_id)).fetchone()[0]
        self.c.execute("UPDATE user_data SET wanna_play = ? WHERE user_id = ? AND chat_id = ?",
                       ('–ù—ñ', user_id, chat_id))
        self.c.execute("UPDATE user_data SET not_play_times = ? WHERE user_id = ? AND chat_id = ?",
                       (0, user_id, chat_id))
        self.conn.commit()
        await self.change_happiness(user_id, chat_id, happiness[clas])

    def get_user2_id(self, chat_id: int, name):
        return self.c.execute("SELECT user_id FROM user_data WHERE name = ? AND chat_id = ?",
                              (name, chat_id)).fetchone()[0]

    async def married(self, chat_id: int, user_id: int, user2_id: int):
        self.c.execute("UPDATE user_data SET married = ? WHERE user_id = ? AND chat_id = ?",
                       (1, user_id, chat_id))
        self.c.execute("UPDATE user_data SET user2_id = ? WHERE user_id = ? AND chat_id = ?",
                       (user2_id, user_id, chat_id))

    async def married_break(self, chat_id: int, user_id: int, user2_id: int):
        self.c.execute("UPDATE user_data SET married = ? WHERE user_id = ? AND chat_id = ?",
                       (2, user_id, chat_id))
        self.c.execute("UPDATE user_data SET married = ? WHERE user_id = ? AND chat_id = ?",
                       (2, user2_id, chat_id))
        self.conn.commit()

    async def change_job(self, user_id: int, chat_id: int, new_job: str):
        self.c.execute("UPDATE job_data SET job = ? WHERE user_id = ? AND chat_id = ?",
                       (new_job, user_id, chat_id))
        self.conn.commit()

    async def start_working(self, user_id: int, chat_id: int):
        self.c.execute("UPDATE job_data SET job_status = ? WHERE user_id = ? AND chat_id = ?",
                       ('–ù–∞ —Ä–æ–±–æ—Ç—ñ', user_id, chat_id))
        self.c.execute("UPDATE time_data SET job_time = ? WHERE user_id = ? AND chat_id = ?",
                       (strftime("%H:%M")+":00", user_id, chat_id))
        self.conn.commit()

    async def change_job_changes(self, user_id: int, chat_id: int, target: str):
        job_changes = self.c.execute("SELECT job_changes FROM job_data WHERE user_id = ? AND chat_id = ?",
                                     (user_id, chat_id)).fetchone()[0]
        if target == '-' and job_changes > 0:
            job_changes = job_changes - 1
        elif target == '+':
            job_changes = job_changes + 1
        self.c.execute("UPDATE job_data SET job_changes = ? WHERE user_id = ? AND chat_id = ?",
                       (job_changes, user_id, chat_id))
        self.conn.commit()

    async def vacation_days(self, user_id: int, chat_id: int, days: int):
        self.c.execute("UPDATE job_data SET vacation_hours = ? WHERE user_id = ? AND chat_id = ?",
                       (days*24, user_id, chat_id))
        self.conn.commit()

    async def vacation(self, user_id: int, chat_id: int, place: str):
        vacation_ = self.c.execute("SELECT vacation FROM job_data WHERE user_id = ? AND chat_id = ?",
                                   (user_id, chat_id)).fetchone()[0]
        self.c.execute("UPDATE job_data SET vacation = ? WHERE user_id = ? AND chat_id = ?",
                       (vacation_ + 1, user_id, chat_id))
        self.c.execute("UPDATE job_data SET job_status = ? WHERE user_id = ? AND chat_id = ?",
                       ("–£ –≤—ñ–¥–ø—É—Å—Ç—Ü—ñ", user_id, chat_id))
        self.c.execute("UPDATE job_data SET vacation_place = ? WHERE user_id = ? AND chat_id = ?",
                       (place, user_id, chat_id))
        self.c.execute("UPDATE time_data SET job_time = ? WHERE user_id = ? AND chat_id = ?",
                       (strftime("%H:%M:%S"), user_id, chat_id))
        self.conn.commit()

    async def pension(self, user_id: int, chat_id: int):
        self.c.execute("UPDATE job_data SET job_status = ? WHERE user_id = ? AND chat_id = ?",
                       ('–ù–∞ –ø–µ–Ω—Å—ñ—ó', user_id, chat_id))
        self.c.execute("UPDATE time_data SET job_time = ? WHERE user_id = ? AND chat_id = ?",
                       (strftime("%H:%M:%S"), user_id, chat_id))
        self.conn.commit()

    def kittens_exist(self, user_id: int, chat_id: int):
        if self.c.execute("SELECT number FROM kittens_data WHERE user_id = ? AND chat_id = ?",
                          (user_id, chat_id)).fetchone() is not None or \
                self.c.execute("SELECT number FROM kittens_data WHERE user2_id = ? AND chat_id = ?",
                               (user_id, chat_id)).fetchone() is not None:
            return 1
        else:
            return 0

    async def kittens(self, chat_id: int, user_id: int, user2_id: int):
        number = random.choice([3, 4, 5])
        photo = random.choice(kitten_photos) + '.jpg'
        type_ = random.choice(kitten_types[self.get_data(user_id, chat_id, 'user_data', 'type') + self.get_data(user2_id, chat_id, 'user_data', 'type')])
        self.c.execute("INSERT INTO kittens_data (chat_id, user_id, user2_id, number, photo, type) "
                       "VALUES (?, ?, ?, ?, ?, ?)", (chat_id, user_id, user2_id, number, photo, type_))
        self.conn.commit()

    def apartment_exist(self, user_id: int, chat_id: int):
        if self.c.execute("SELECT chat_id FROM apartment_data WHERE user_id = ? AND chat_id = ?",
                          (user_id, chat_id)).fetchone() is not None:
            return 1
        else:
            return 0

    async def buy_apartment(self, user_id: int, chat_id: int):
        money = self.c.execute("SELECT money FROM user_data WHERE user_id = ? AND chat_id = ?", (user_id, chat_id)).fetchone()[0]
        type_ = random.choice(apartment_types)
        photo = random.choice(apartment_photos) + '.jpg'
        self.c.execute("UPDATE user_data SET money = ? WHERE user_id = ? AND chat_id = ?", (money - 100, user_id, chat_id))
        self.c.execute("INSERT INTO apartment_data (user_id, chat_id, photo, type) VALUES (?, ?, ?, ?)",
                       (user_id, chat_id, photo, type_))
        self.conn.commit()

    def user_in_all_apartments_exist(self, user_id: int, chat_id: int):
        for i in range(5):
            if self.c.execute(f"SELECT user_id FROM apartment_data WHERE user{i+1}_id = ? AND chat_id = ?",
                              (user_id, chat_id)).fetchone() is not None:
                apartment_owner = self.c.execute(f"SELECT user_id FROM apartment_data WHERE user{i+1}_id = ? AND chat_id = ?",
                                                 (user_id, chat_id)).fetchone()[0]
                return apartment_owner
        else:
            return 0

    def user_in_apartment_exist(self, user_id: int, chat_id: int, user2_id: int):
        for i in range(5):
            apartment_user = self.c.execute(f"SELECT user{i+1}_id FROM apartment_data WHERE user_id = ? AND chat_id = ?",
                                            (user_id, chat_id)).fetchone()[0]
            if apartment_user == user2_id:
                return apartment_user
        else:
            return 0

    async def add_user_to_apartment(self, user_id: int, chat_id: int, user2_id: int):
        for i in range(5):
            user = self.c.execute(f"SELECT user{i + 1}_id FROM apartment_data WHERE user_id = ? AND chat_id = ?",
                                  (user_id, chat_id)).fetchone()[0]
            if user == 0:
                self.c.execute(f"UPDATE apartment_data SET user{i + 1}_id = ? WHERE user_id = ? AND chat_id = ?",
                               (user2_id, user_id, chat_id))
                self.conn.commit()
                break

    async def remove_from_apartment(self, user_id: int, chat_id: int, user2_id: int):
        for i in range(5):
            user = self.c.execute(f"SELECT user{i+1}_id FROM apartment_data WHERE user_id = ? AND chat_id = ?",
                                  (user_id, chat_id)).fetchone()[0]
            if user == user2_id:
                self.c.execute(f"UPDATE apartment_data SET user{i+1}_id = ? WHERE user_id = ? AND chat_id = ?",
                               (0, user_id, chat_id))
                self.conn.commit()
                break

    async def change_apartment(self, user_id: int, chat_id: int, user2_id: int):
        if self.user_in_all_apartments_exist(user2_id, chat_id) == 0:
            await self.add_user_to_apartment(user_id, chat_id, user2_id)
        else:
            owner = self.user_in_all_apartments_exist(user2_id, chat_id)
            await self.remove_from_apartment(owner, chat_id, user2_id)
            await self.add_user_to_apartment(user_id, chat_id, user2_id)

    async def all_feed(self):
        max_ = {'–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫': 4, '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫': 3, '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫': 5, '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫': 4,
                '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω': 5, '–ö—ñ—Ç–∏–∫ –≤–∞–º–ø—ñ—Ä': 5, '–ö—ñ—Ç–∏–∫ –∫–æ–º—É–Ω—ñ—Å—Ç': 5, '–ù–∞—Ä–∫—ñ—Ç': 5}
        max_id = self.c.execute("SELECT MAX(id) FROM user_data").fetchall()[0][0]
        for i in range(1, max_id + 1):
            user_time = self.c.execute("SELECT feed_time FROM time_data WHERE id = ?", (i,)).fetchone()[0]
            if strftime('%H:%M:%S') in time_list(user_time, "feed") and \
                    self.c.execute("SELECT health FROM user_data WHERE id = ?", (i,)).fetchone()[0] == '–ó–¥–æ—Ä–æ–≤':
                feed_limit = self.c.execute("SELECT feed_limit FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                if feed_limit < max_[self.c.execute("SELECT class FROM user_data WHERE id = ?", (i,)).fetchone()[0]]:
                    self.c.execute("UPDATE user_data SET feed_limit = ? WHERE id = ?", (feed_limit + 1, i))
        self.conn.commit()

    async def all_hungry(self):
        hungry_minus = {'–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫': 5, '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫': 5, '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫': 6, '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫': 5,
                        '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω': 5, '–ö—ñ—Ç–∏–∫ –≤–∞–º–ø—ñ—Ä': 5, '–ö—ñ—Ç–∏–∫ –∫–æ–º—É–Ω—ñ—Å—Ç': 5, '–ù–∞—Ä–∫—ñ—Ç': 5}
        max_id = self.c.execute("SELECT MAX(id) FROM user_data").fetchall()[0][0]
        for i in range(1, max_id + 1):
            user_time = self.c.execute("SELECT create_time FROM time_data WHERE id = ?", (i,)).fetchone()[0]
            if strftime('%H:%M:%S') in time_list(user_time, "hungry") and \
                    self.c.execute("SELECT health FROM user_data WHERE id = ?", (i,)).fetchone()[0] == '–ó–¥–æ—Ä–æ–≤':
                hungry = self.c.execute("SELECT hungry FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                if hungry != 0:
                    clas = self.c.execute("SELECT class FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                    if hungry - hungry_minus[clas] > 0:
                        hungry = hungry - hungry_minus[clas]
                    else:
                        hungry = 0
                    self.c.execute("UPDATE user_data SET hungry = ? WHERE id = ?", (hungry, i))
                else:
                    happiness = self.c.execute("SELECT happiness FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                    if happiness - 5 > 0:
                        happiness = happiness - 5
                    else:
                        happiness = 0
                    self.c.execute("UPDATE user_data SET happiness = ? WHERE id = ?", (happiness, i))
        self.conn.commit()

    async def all_wanna_play(self):
        play_chance = {'–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫': ['–ù—ñ', '–¢–∞–∫'], '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫': ['–ù—ñ', '–ù—ñ', '–ù—ñ', '–¢–∞–∫'],
                       '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫': ['–ù—ñ', '–¢–∞–∫', '–¢–∞–∫', '–¢–∞–∫'], '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫': ['–ù—ñ', '–¢–∞–∫'],
                       '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω': ['–ù—ñ', '–¢–∞–∫'], '–ö—ñ—Ç–∏–∫ –≤–∞–º–ø—ñ—Ä': ['–ù—ñ', '–¢–∞–∫'],
                       '–ö—ñ—Ç–∏–∫ –∫–æ–º—É–Ω—ñ—Å—Ç': ['–ù—ñ', '–¢–∞–∫'], '–ù–∞—Ä–∫—ñ—Ç': ['–ù—ñ', '–¢–∞–∫']}
        max_id = self.c.execute("SELECT MAX(id) FROM user_data").fetchall()[0][0]
        for i in range(1, max_id + 1):
            user_time = self.c.execute("SELECT create_time FROM time_data WHERE id = ?", (i,)).fetchone()[0]
            if strftime('%H:%M:%S') in time_list(user_time, "wanna_play") and \
                    self.c.execute("SELECT health FROM user_data WHERE id = ?", (i,)).fetchone()[0] == '–ó–¥–æ—Ä–æ–≤':
                wanna_play = self.c.execute("SELECT wanna_play FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                if wanna_play != '–¢–∞–∫':
                    clas = self.c.execute("SELECT class FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                    self.c.execute("UPDATE user_data SET wanna_play = ? WHERE id = ?", (random.choice(play_chance[clas]), i))
                else:
                    not_play_times = self.c.execute("SELECT not_play_times FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                    if not_play_times < 5:
                        self.c.execute("UPDATE user_data SET not_play_times = ? WHERE id = ?", (not_play_times + 1, i))
                    else:
                        happiness = self.c.execute("SELECT happiness FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                        if happiness - 10 > 0:
                            happiness = happiness - 10
                        else:
                            happiness = 0
                        self.c.execute("UPDATE user_data SET happiness = ? WHERE id = ?", (happiness, i))
        self.conn.commit()

    async def all_job(self):
        job_money = {'–ë—ñ–∑–Ω–µ—Å–º–µ–Ω': 5, '–ë–∞–Ω–∫—ñ—Ä': 5, '–û—Ñ—ñ—Ü—ñ–∞–Ω—Ç': 5, '–ë—É–¥—ñ–≤–µ–ª—å–Ω–∏–∫': 5,
                     '–í—ñ–π—Å—å–∫–æ–≤–∏–π': 5, '–®–ø–∏–≥—É–Ω': 5, '–ü—Å–∏—Ö–æ–ª–æ–≥': 5, '–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç': 5,
                     '–í—á–µ–Ω–∏–π': 5, '–°–æ–º—ñ–ª—å—î': 5, '–ú–µ–Ω–µ–¥–∂–µ—Ä': 5, '–Ü–Ω–≤–µ—Å—Ç–æ—Ä': 5,
                     '–ö—É—Ö–∞—Ä': 5, '–õ—å–æ—Ç—á–∏–∫': 5, '–ñ—É—Ä–Ω–∞–ª—ñ—Å—Ç': 5, '–ö–æ—Å–º–æ–Ω–∞–≤—Ç': 5}
        max_id = self.c.execute("SELECT MAX(id) FROM user_data").fetchall()[0][0]
        for i in range(1, max_id + 1):
            user_time = self.c.execute("SELECT job_time FROM time_data WHERE id = ?", (i,)).fetchone()[0]
            if user_time != '':
                if strftime('%H:%M:%S') in time_list(user_time, "job") and \
                        self.c.execute("SELECT health FROM user_data WHERE id = ?", (i,)).fetchone()[0] == '–ó–¥–æ—Ä–æ–≤':
                    money = self.c.execute("SELECT money FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                    if self.c.execute("SELECT job_status FROM job_data WHERE id = ?", (i,)).fetchone()[0] == '–ù–∞ —Ä–æ–±–æ—Ç—ñ':
                        job = self.c.execute("SELECT job FROM job_data WHERE id = ?", (i,)).fetchone()[0]
                        job_hours = self.c.execute("SELECT job_hours FROM job_data WHERE id = ?", (i,)).fetchone()[0]
                        self.c.execute("UPDATE user_data SET money = ? WHERE id = ?", (money + job_money[job], i))
                        self.c.execute("UPDATE job_data SET job_hours = ? WHERE id = ?", (job_hours + 1, i))
                    elif self.c.execute("SELECT job_status FROM job_data WHERE id = ?", (i,)).fetchone()[0] == '–£ –≤—ñ–¥–ø—É—Å—Ç—Ü—ñ':
                        vacation_hours = self.c.execute("SELECT vacation_hours FROM job_data WHERE id = ?", (i,)).fetchone()[0]
                        self.c.execute("UPDATE user_data SET money = ? WHERE id = ?", (money + 8, i))
                        self.c.execute("UPDATE job_data SET vacation_hours = ? WHERE id = ?", (vacation_hours - 1, i))
                        if vacation_hours - 1 == 0:
                            self.c.execute("UPDATE job_data SET job_status = ? WHERE id = ?", ('–ù–µ –ø—Ä–∞—Ü—é—î', i))
                            self.c.execute("UPDATE job_data SET vacation_place = ? WHERE id = ?", ('', i))
                            self.c.execute("UPDATE time_data SET job_time = ? WHERE id = ?", ('', i))
                    elif self.c.execute("SELECT job_status FROM job_data WHERE id = ?", (i,)).fetchone()[0] == '–ù–∞ –ø–µ–Ω—Å—ñ—ó':
                        self.c.execute("UPDATE user_data SET money = ? WHERE id = ?", (money + 15, i))
        self.conn.commit()

    async def all_stop_working(self):
        max_id = self.c.execute("SELECT MAX(id) FROM user_data").fetchall()[0][0]
        for i in range(1, max_id + 1):
            user_time = self.c.execute("SELECT job_time FROM time_data WHERE id = ?", (i,)).fetchone()[0]
            if user_time != '':
                if strftime('%H:%M:%S') == time_list(user_time, "working") and \
                        self.c.execute("SELECT health FROM user_data WHERE id = ?", (i,)).fetchone()[0] == '–ó–¥–æ—Ä–æ–≤' and \
                        self.c.execute("SELECT job_status FROM job_data WHERE id = ?", (i,)).fetchone()[0] == '–ù–∞ —Ä–æ–±–æ—Ç—ñ':
                    self.c.execute("UPDATE job_data SET job_status = ? WHERE id = ?", ('–ù–µ –ø—Ä–∞—Ü—é—î', i))
                    self.c.execute("UPDATE time_data SET job_time = ? WHERE id = ?", ('', i))
        self.conn.commit()

    async def not_doing(self):
        max_id = self.c.execute("SELECT MAX(id) FROM user_data").fetchall()[0][0]
        for i in range(1, max_id + 1):
            user_time = self.c.execute("SELECT create_time FROM time_data WHERE id = ?", (i,)).fetchone()[0]
            if strftime('%H:%M:%S') in time_list(user_time, "not_doing") and \
                    self.c.execute("SELECT health FROM user_data WHERE id = ?", (i,)).fetchone()[0] == '–ó–¥–æ—Ä–æ–≤':
                hungry = self.c.execute("SELECT hungry FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                happiness = self.c.execute("SELECT happiness FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                if hungry == 0 and happiness == 0:
                    zero_times = self.c.execute("SELECT zero_times FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                    if zero_times < 6:
                        self.c.execute("UPDATE user_data SET zero_times = ? WHERE id = ?", (zero_times + 1, i))
                    else:
                        self.c.execute("UPDATE user_data SET health = ? WHERE id = ?", ('–ú–µ—Ä—Ç–≤–∏–π', i))
                        self.c.execute("UPDATE user_data SET kill_ever = ? WHERE id = ?", (3, i))
        self.conn.commit()

    def get_data(self, user_id: int, chat_id: int, table: str, target: str):
        return self.c.execute(f"SELECT {target} FROM {table} WHERE user_id = ? AND chat_id = ?", (user_id, chat_id)).fetchone()[0]

    def get_all_data(self, user_id: int, chat_id: int, table: str, target: str):
        if table == 'user_data':
            list_ = list(self.c.execute("SELECT * FROM user_data WHERE user_id = ? AND chat_id = ?", (user_id, chat_id)).fetchone())
            if target == 'cat_data':
                return f"üê±–Ü–º'—è: {list_[4]}\nüß∂–°—Ç–∞—Ç—É—Å: {list_[5]}\n‚ú®–†—ñ–≤–µ–Ω—å: {list_[6]}/50\n" \
                       f"‚ùáÔ∏è–¢–∏–ø: {list_[7]}\nüßø–ö–ª–∞—Å: {list_[8]}\n‚ù§Ô∏è–ó–¥–æ—Ä–æ–≤'—è: {list_[15]}\nü•©–°–∏—Ç—ñ—Å—Ç—å: {list_[9]}/100\n" \
                       f"üåà–†—ñ–≤–µ–Ω—å —â–∞—Å—Ç—è: {list_[13]}/100\n"
            elif target == 'cat_info':
                rz = {1: '—Ä–∞–∑', 2: '—Ä–∞–∑–∞', 3: '—Ä–∞–∑–∏', 4: '—Ä–∞–∑–∏', 5: '—Ä–∞–∑',
                      6: '—Ä–∞–∑', 7: '—Ä–∞–∑', 8: '—Ä–∞–∑', 9: '—Ä–∞–∑', 10: '—Ä–∞–∑'}
                if list_[10] != 0:
                    feed = f": {list_[10]} {rz[list_[10]]}"
                else:
                    hour = {0: '–≥–æ–¥–∏–Ω', 1: '–≥–æ–¥–∏–Ω—É', 2: '–≥–æ–¥–∏–Ω–∏'}
                    minute = {1: '—Ö–≤–∏–ª–∏–Ω—É', 2: '—Ö–≤–∏–ª–∏–Ω–∏', 3: '—Ö–≤–∏–ª–∏–Ω–∏', 4: '—Ö–≤–∏–ª–∏–Ω–∏', 5: '—Ö–≤–∏–ª–∏–Ω',
                              6: '—Ö–≤–∏–ª–∏–Ω', 7: '—Ö–≤–∏–ª–∏–Ω', 8: '—Ö–≤–∏–ª–∏–Ω', 9: '—Ö–≤–∏–ª–∏–Ω', 0: '—Ö–≤–∏–ª–∏–Ω'}
                    feed_time = self.get_data(user_id, chat_id, 'time_data', 'feed_time')
                    feed_time_list = time_list(feed_time, 'feed')
                    index = 0
                    for i in range(len(feed_time_list)):
                        if feed_time_list[i] == feed_time:
                            index = i + 1
                            if i + 1 == len(feed_time_list):
                                index = 0
                    time_ = str(datetime.strptime(feed_time_list[index][:5], "%H:%M") - datetime.strptime(strftime("%H:%M"), "%H:%M"))[:4]
                    feed = f" —á–µ—Ä–µ–∑"
                    if time_[:1] != 0:
                        feed = feed + f" {time_[:1]} {hour[int(time_[:1])]}"
                    feed = feed + f" {int(time_[2:])} {minute[int(time_[3:])]}"
                info = f"üê±–Ü–º'—è: {list_[4]}\nü•©–ú–æ–∂–Ω–∞ –Ω–∞–≥–æ–¥—É–≤–∞—Ç–∏{feed}\nüß©–•–æ—á–µ –≥—Ä–∞—Ç–∏—Å—è: {list_[11]}\n"
                if int(self.get_data(user_id, chat_id, 'user_data', 'under_level')) >= 15:
                    if list_[22] == 0:
                        family = "–ù–µ–º–∞"
                    elif list_[22] == 1:
                        family = self.get_data(list_[23], chat_id, 'user_data', 'name')
                    else:
                        family = f"–†–æ–∑–ª—É—á–µ–Ω–∏–π –∑ {self.get_data(list_[23], chat_id, 'user_data', 'name')}"
                    info = info + f"‚ù§Ô∏è–°—ñ–º'—è: {family}\n"
                return info
            elif target == 'cat_money':
                return f"üí∞–í–∞—à –±–∞–ª–∞–Ω—Å: {list_[16]}"
        elif table == 'job_data':
            list_ = list(self.c.execute("SELECT * FROM job_data WHERE user_id = ? AND chat_id = ?", (user_id, chat_id)).fetchone())
            info = ''
            if list_[4] == '–ù–∞ —Ä–æ–±–æ—Ç—ñ':
                hour = {0: '–≥–æ–¥–∏–Ω', 1: '–≥–æ–¥–∏–Ω—É', 2: '–≥–æ–¥–∏–Ω–∏', 3: '–≥–æ–¥–∏–Ω–∏', 4: '–≥–æ–¥–∏–Ω–∏'}
                minute = {1: '—Ö–≤–∏–ª–∏–Ω—É', 2: '—Ö–≤–∏–ª–∏–Ω–∏', 3: '—Ö–≤–∏–ª–∏–Ω–∏', 4: '—Ö–≤–∏–ª–∏–Ω–∏', 5: '—Ö–≤–∏–ª–∏–Ω',
                          6: '—Ö–≤–∏–ª–∏–Ω', 7: '—Ö–≤–∏–ª–∏–Ω', 8: '—Ö–≤–∏–ª–∏–Ω', 9: '—Ö–≤–∏–ª–∏–Ω', 0: '—Ö–≤–∏–ª–∏–Ω'}
                job_time = self.get_data(user_id, chat_id, 'time_data', 'job_time')
                stop_job_time = time_list(job_time, 'working')
                time_ = str(datetime.strptime(stop_job_time[:5], "%H:%M") - datetime.strptime(strftime("%H:%M"), "%H:%M"))[:4]
                info = f"üõ†–ü–æ–≤–µ—Ä–Ω–µ—Ç—å—Å—è –¥–æ–¥–æ–º—É —á–µ—Ä–µ–∑"
                if int(time_[:1]) != 0:
                    info = info + f" {time_[:1]} {hour[int(time_[:1])]}"
                info = info + f" {int(time_[2:])} {minute[int(time_[3:])]}"
            elif list_[4] == '–£ –≤—ñ–¥–ø—É—Å—Ç—Ü—ñ':
                day = {0: '–¥–Ω—ñ–≤', 1: '–¥–µ–Ω—å', 2: '–¥–Ω—ñ', 3: '–¥–Ω—ñ', 4: '–¥–Ω—ñ', 5: '–¥–Ω—ñ–≤', 6: '–¥–Ω—ñ–≤', 7: '–¥–Ω—ñ–≤', 8: '–¥–Ω—ñ–≤',
                       9: '–¥–Ω—ñ–≤', 10: '–¥–Ω—ñ–≤', 11: '–¥–Ω—ñ–≤', 12: '–¥–Ω—ñ–≤', 13: '–¥–Ω—ñ–≤', 14: '–¥–Ω—ñ–≤'}
                hour = {1: '–≥–æ–¥–∏–Ω—É', 2: '–≥–æ–¥–∏–Ω–∏', 3: '–≥–æ–¥–∏–Ω–∏', 4: '–≥–æ–¥–∏–Ω–∏', 6: '–≥–æ–¥–∏–Ω', 7: '–≥–æ–¥–∏–Ω', 8: '–≥–æ–¥–∏–Ω',
                        9: '–≥–æ–¥–∏–Ω', 10: '–≥–æ–¥–∏–Ω', 11: '–≥–æ–¥–∏–Ω', 12: '–≥–æ–¥–∏–Ω', 13: '–≥–æ–¥–∏–Ω', 14: '–≥–æ–¥–∏–Ω', 15: '–≥–æ–¥–∏–Ω',
                        16: '–≥–æ–¥–∏–Ω', 17: '–≥–æ–¥–∏–Ω', 18: '–≥–æ–¥–∏–Ω', 19: '–≥–æ–¥–∏–Ω', 20: '–≥–æ–¥–∏–Ω', 21: '–≥–æ–¥–∏–Ω—É', 22: '–≥–æ–¥–∏–Ω–∏',
                        23: '–≥–æ–¥–∏–Ω–∏'}
                days = int(list_[9] / 24)
                hours = int(list_[9] % 24)
                info = f"üõ†–ü–æ–ª–µ—Ç—ñ–≤ —É {list_[9]}, –ø–æ–≤–µ—Ä–Ω–µ—Ç—å—Å—è —á–µ—Ä–µ–∑ {days} {day[days]} —ñ {hours} {hour[hours]}‚ú®\n"
            return f"üõ†–ü—Ä–æ—Ñ–µ—Å—ñ—è: {list_[3]}\nüõ†–í—ñ–¥–ø—Ä–∞—Ü—å–æ–≤–∞–Ω—ñ –≥–æ–¥–∏–Ω–∏: {list_[5]}\nüõ†–°—Ç–∞—Ç—É—Å: {list_[4]}\n" + info
        elif table == 'kittens_data':
            if self.c.execute("SELECT * FROM kittens_data WHERE user_id = ? AND chat_id = ?",
                              (user_id, chat_id)).fetchone() is not None:
                list_ = list(self.c.execute("SELECT * FROM kittens_data WHERE user_id = ? AND chat_id = ?",
                                            (user_id, chat_id)).fetchone())
            else:
                list_ = list(self.c.execute("SELECT * FROM kittens_data WHERE user_id = ? AND chat_id = ?",
                                            (self.get_data(user_id, chat_id, 'user_data', 'user2_id'), chat_id)).fetchone())
            return f"‚ù§Ô∏è–ú–∞–º–∞ —ñ —Ç–∞—Ç–æ: {self.get_data(list_[2], chat_id, 'user_data', 'name')} " \
                   f"—ñ {self.get_data(list_[3], chat_id, 'user_data', 'name')}\nüê±–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {list_[4]}\n" \
                   f"‚ùáÔ∏è–¢–∏–ø: {list_[7]}\n‚ú®–†—ñ–≤–µ–Ω—å: {list_[6]}\n"
        elif table == 'apartment_data':
            list_ = list(self.c.execute("SELECT * FROM apartment_data WHERE user_id = ? AND chat_id = ?",
                                        (user_id, chat_id)).fetchone())
            owner = self.get_data(user_id, chat_id, 'user_data', 'name')
            cats = ''
            for i in range(5):
                if self.get_data(user_id, chat_id, 'apartment_data', f'user{i + 1}_id') != 0:
                    cats = cats + f"{self.get_data(self.get_data(user_id, chat_id, 'apartment_data', f'user{i + 1}_id'), chat_id, 'user_data', 'name')}, "
            if cats == '':
                cats = "–ù–µ–º–∞"
            else:
                cats = cats[:len(cats) - 2]
            return f"üßø–í–ª–∞—Å–Ω–∏–∫: {owner}\n‚ùáÔ∏è–†–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è: {list_[10]}\n‚ú®–†—ñ–≤–µ–Ω—å: {list_[9]}\nüê±–ú–µ—à–∫–∞–Ω—Ü—ñ: {cats}\n"

    def return_max_id(self, table: str):
        return self.c.execute(f"SELECT MAX(id) FROM {table}").fetchall()[0][0]
