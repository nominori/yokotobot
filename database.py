import sqlite3
import random

photos = [1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
          1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209,
          2001, 2002, 2003, 2004, 2005, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2201, 2202, 2203, 2204, 2205,
          2206, 2301, 2302, 2303, 2401, 2402, 2403, 3101, 3102, 3201, 3202, 3301, 3302, 3401, 3402, 4500, 4600, 4700]
types = {'1': '–ó–≤–∏—á–∞–π–Ω–∏–πüíô', '2': '–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°', '3': '–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú', '4': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π‚ù§Ô∏è'}
classes = {'0': '–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫', '1': '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫', '2': '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫', '3': '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫',
           '4': '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω', '5': '–ö—ñ—Ç–∏–∫ –≤–∞–º–ø—ñ—Ä', '6': '–ö—ñ—Ç–∏–∫ –∫–æ–º—É–Ω—ñ—Å—Ç', '7': '–ù–∞—Ä–∫—ñ—Ç'}
kitten_photos = ['k1', 'k2', 'k3', 'k4']
kitten_types = {'–ó–≤–∏—á–∞–π–Ω–∏–πüíô'+'–ó–≤–∏—á–∞–π–Ω–∏–πüíô': ['–ó–≤–∏—á–∞–π–Ω–∏–πüíô'],
                '–ó–≤–∏—á–∞–π–Ω–∏–πüíô'+'–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°': ['–ó–≤–∏—á–∞–π–Ω–∏–πüíô', '–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°'],
                '–ó–≤–∏—á–∞–π–Ω–∏–πüíô'+'–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú': ['–ó–≤–∏—á–∞–π–Ω–∏–πüíô', '–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°', '–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°', '–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú'],
                '–ó–≤–∏—á–∞–π–Ω–∏–πüíô'+'–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π‚ù§Ô∏è': ['–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°', '–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú'],
                '–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°'+'–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°': ['–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°'],
                '–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°'+'–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú': ['–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°', '–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú'],
                '–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°'+'–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π‚ù§Ô∏è': ['–†—ñ–¥–∫—ñ—Å–Ω–∏–πüß°', '–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú', '–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π‚ù§Ô∏è'],
                '–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú'+'–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú': ['–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú'],
                '–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú'+'–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π‚ù§Ô∏è': ['–£–ª—å—Ç—Ä–∞—Ä—ñ–¥–∫—ñ—Å–Ω–∏–πüíú', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π‚ù§Ô∏è'],
                '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π‚ù§Ô∏è'+'–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π‚ù§Ô∏è': ['–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π‚ù§Ô∏è']}


class Database:
    def __init__(self):
        self.conn = sqlite3.connect('database.db')
        self.c = self.conn.cursor()

    def init_db(self, force: bool = False):
        with self.conn:
            if force:
                self.c.execute('DROP TABLE IF EXISTS user_data')
            self.c.execute('''
                CREATE TABLE IF NOT EXISTS user_data (
                    id          INTEGER PRIMARY KEY,
                    user_id     INTEGER NOT NULL,
                    chat_id     INTEGER NOT NULL,
                    photo       TEXT    NOT NULL,
                    name        TEXT    NOT NULL DEFAULT '–í–∞—à –ö—ñ—Ç–∏–∫',
                    level       TEXT    NOT NULL DEFAULT '–ö–æ—à–µ–Ω—è—Ç–∫–æ',
                    under_level INTEGER NOT NULL DEFAULT 1,
                    type        TEXT    NOT NULL,
                    class       TEXT    NOT NULL,
                    hungry      INTEGER NOT NULL DEFAULT 50,
                    feed_limit  INTEGER NOT NULL DEFAULT 3,
                    wanna_play  TEXT    NOT NULL,
                    not_play_times   INTEGER NOT NULL DEFAULT 0,
                    happiness   INTEGER NOT NULL DEFAULT 50,
                    zero_times  INTEGER NOT NULL DEFAULT 0,
                    health      TEXT    NOT NULL DEFAULT '–ó–¥–æ—Ä–æ–≤',
                    job         TEXT    NOT NULL DEFAULT '–ù–µ–º–∞',
                    job_status  TEXT    NOT NULL DEFAULT '–ù–µ –ø—Ä–∞—Ü—é—î',
                    job_hours   INTEGER NOT NULL DEFAULT 0,
                    money       INTEGER NOT NULL DEFAULT 0,
                    command     TEXT    NOT NULL DEFAULT '',
                    name_sets   INTEGER NOT NULL DEFAULT 4,
                    kill_ever   INTEGER NOT NULL DEFAULT 0,
                    alive       INTEGER NOT NULL DEFAULT 0,
                    job_changes INTEGER NOT NULL DEFAULT 0,
                    married     INTEGER NOT NULL DEFAULT 0,
                    user2_id    INTEGER NOT NULL DEFAULT 0,
                    kittens     INTEGER NOT NULL DEFAULT 0,
                    kitten_photo   TEXT    NOT NULL DEFAULT '',
                    kitten_level   INTEGER    NOT NULL DEFAULT 1,
                    kitten_type    TEXT    NOT NULL DEFAULT '',
                    mother_id   INTEGER NOT NULL DEFAULT 0,
                    father_id   INTEGER NOT NULL DEFAULT 0,
                    vacation_place    TEXT    NOT NULL DEFAULT '',
                    vacation_hours   INTEGER NOT NULL DEFAULT 0
                )
            ''')
            self.conn.commit()

    def user_exist(self, user_id: int, chat_id: int):
        with self.conn:
            if self.c.execute("SELECT chat_id FROM user_data WHERE user_id = ? AND chat_id = ?",
                              (user_id, chat_id)).fetchone() is not None:
                return 1
            else:
                return 0

    def add_user(self, user_id: int, chat_id: int):
        with self.conn:
            pict = str(random.choice(photos)) + '.jpg'
            play = random.choice(['–¢–∞–∫', '–ù—ñ'])
            self.c.execute("INSERT INTO user_data (user_id, chat_id, photo, type, class, wanna_play) "
                           "VALUES (?, ?, ?, ?, ?, ?)",
                           (user_id, chat_id, pict, types[pict[:1]], classes[pict[1:2]], play))
            self.conn.commit()

    def name_exist(self, chat_id: int, name):
        with self.conn:
            max_id = self.c.execute("SELECT MAX(id) FROM user_data").fetchall()[0][0]
            for i in range(1, max_id + 1):
                if self.c.execute("SELECT name FROM user_data WHERE id = ? AND chat_id = ?",
                                  (i, chat_id)).fetchone() is not None:
                    if name == self.c.execute("SELECT name FROM user_data WHERE id = ? AND chat_id = ?",
                                              (i, chat_id)).fetchone()[0]:
                        return 1
            else:
                return 0

    def set_name(self, user_id: int, chat_id: int, name):
        with self.conn:
            self.c.execute("UPDATE user_data SET name = ? WHERE user_id = ? AND chat_id = ?", (name, user_id, chat_id))
            name_sets = self.c.execute("SELECT name_sets FROM user_data WHERE user_id = ? AND chat_id = ?",
                                       (user_id, chat_id)).fetchone()[0]
            if name_sets != 0:
                name_sets = name_sets - 1
            self.c.execute("UPDATE user_data SET name_sets = ? WHERE user_id = ? AND chat_id = ?",
                           (name_sets, user_id, chat_id))
            self.conn.commit()

    def change_feed(self, user_id: int, chat_id: int, target: str):
        with self.conn:
            feed_limit = self.c.execute("SELECT feed_limit FROM user_data WHERE user_id = ? AND chat_id = ?",
                                        (user_id, chat_id)).fetchone()[0]
            if target == '-' and feed_limit > 0:
                feed_limit = feed_limit - 1
            elif target == '+':
                feed_limit = feed_limit + 1
            self.c.execute("UPDATE user_data SET feed_limit = ? WHERE user_id = ? AND chat_id = ?",
                           (feed_limit, user_id, chat_id))
            self.conn.commit()

    def change_command(self, user_id: int, chat_id: int, command: str):
        with self.conn:
            self.c.execute("UPDATE user_data SET command = ? WHERE user_id = ? AND chat_id = ?",
                           (command, user_id, chat_id))
            self.conn.commit()

    def kill(self, user_id: int, chat_id: int, command: str):
        with self.conn:
            if command == 'kill':
                self.c.execute("UPDATE user_data SET kill_ever = ? WHERE user_id = ? AND chat_id = ?",
                               (2, user_id, chat_id))
                self.c.execute("UPDATE user_data SET health = ? WHERE user_id = ? AND chat_id = ?",
                               ('–ú–µ—Ä—Ç–≤–∏–π', user_id, chat_id))
            elif command == 'wanted':
                self.c.execute("UPDATE user_data SET kill_ever = ? WHERE user_id = ? AND chat_id = ?",
                               (1, user_id, chat_id))
            self.conn.commit()

    def alive(self, user_id: int, chat_id: int):
        self.c.execute("UPDATE user_data SET health = ? WHERE user_id = ? AND chat_id = ?",
                       ('–ó–¥–æ—Ä–æ–≤', user_id, chat_id))
        self.c.execute("UPDATE user_data SET alive = ? WHERE user_id = ? AND chat_id = ?", (1, user_id, chat_id))
        self.c.execute("UPDATE user_data SET kill_ever = ? WHERE user_id = ? AND chat_id = ?", (4, user_id, chat_id))
        self.c.execute("UPDATE user_data SET zero_times = ? WHERE user_id = ? AND chat_id = ?", (0, user_id, chat_id))
        self.c.execute("UPDATE user_data SET hungry = ? WHERE user_id = ? AND chat_id = ?", (50, user_id, chat_id))
        self.c.execute("UPDATE user_data SET wanna_play = ? WHERE user_id = ? AND chat_id = ?",
                       ('–¢–∞–∫', user_id, chat_id))
        self.c.execute("UPDATE user_data SET not_play_times = ? WHERE user_id = ? AND chat_id = ?",
                       (0, user_id, chat_id))
        self.c.execute("UPDATE user_data SET money = ? WHERE user_id = ? AND chat_id = ?",
                       (0, user_id, chat_id))

    def level_up(self, user_id: int, chat_id: int):
        with self.conn:
            under_level = self.c.execute("SELECT under_level FROM user_data WHERE user_id = ? AND chat_id = ?",
                                         (user_id, chat_id)).fetchone()[0]
            if under_level + 1 == 5:
                self.c.execute("UPDATE user_data SET level = ? WHERE user_id = ? AND chat_id = ?",
                               ('–ö—ñ—Ç', user_id, chat_id))
            elif under_level + 1 == 20:
                self.c.execute("UPDATE user_data SET level = ? WHERE user_id = ? AND chat_id = ?",
                               ('–°—É–ø–µ—Ä–∫—ñ—Ç', user_id, chat_id))
            elif under_level + 1 == 35:
                self.c.execute("UPDATE user_data SET level = ? WHERE user_id = ? AND chat_id = ?",
                               ('–ú—É–¥—Ä–∏–π –∫—ñ—Ç', user_id, chat_id))
                self.change_job_changes(user_id, chat_id, '+')
            elif under_level + 1 in [15, 25, 45]:
                self.change_job_changes(user_id, chat_id, '+')
            if under_level < 50:
                self.c.execute("UPDATE user_data SET under_level = ? WHERE user_id = ? AND chat_id = ?",
                               (under_level + 1, user_id, chat_id))
                self.change_feed(user_id, chat_id, '+')
            self.conn.commit()

    def change_happiness(self, user_id: int, chat_id: int, plus: int):
        with self.conn:
            happiness = self.c.execute("SELECT happiness FROM user_data WHERE user_id = ? AND chat_id = ?",
                                       (user_id, chat_id)).fetchone()[0]
            if happiness + plus >= 100:
                happiness = 100
            else:
                happiness = happiness + plus
            self.c.execute("UPDATE user_data SET happiness = ? WHERE user_id = ? AND chat_id = ?",
                           (happiness, user_id, chat_id))
            self.conn.commit()

    def change_hungry(self, user_id: int, chat_id: int):
        with self.conn:
            hungry_plus = {'–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫': 15, '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫': 20, '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫': 16, '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫': 17,
                           '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω': 20, '–ö—ñ—Ç–∏–∫ –≤–∞–º–ø—ñ—Ä': 20, '–ö—ñ—Ç–∏–∫ –∫–æ–º—É–Ω—ñ—Å—Ç': 20, '–ù–∞—Ä–∫—ñ—Ç': 20}
            happiness = {'–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫': 5, '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫': 6, '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫': 5, '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫': 7,
                         '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω': 10, '–ö—ñ—Ç–∏–∫ –≤–∞–º–ø—ñ—Ä': 8, '–ö—ñ—Ç–∏–∫ –∫–æ–º—É–Ω—ñ—Å—Ç': 8, '–ù–∞—Ä–∫—ñ—Ç': 8}
            self.change_feed(user_id, chat_id, '-')
            hungry = self.c.execute("SELECT hungry FROM user_data WHERE user_id = ? AND chat_id = ?",
                                    (user_id, chat_id)).fetchone()[0]
            clas = self.c.execute("SELECT class FROM user_data WHERE user_id = ? AND chat_id = ?",
                                  (user_id, chat_id)).fetchone()[0]
            if hungry + hungry_plus[clas] >= 100:
                hungry = 30
                self.level_up(user_id, chat_id)
            else:
                hungry = hungry + hungry_plus[clas]
            self.c.execute("UPDATE user_data SET hungry = ? WHERE user_id = ? AND chat_id = ?", (hungry, user_id, chat_id))
            self.conn.commit()
            self.change_happiness(user_id, chat_id, happiness[clas])

    def change_wanna_play(self, user_id: int, chat_id: int):
        with self.conn:
            happiness = {'–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫': 20, '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫': 25, '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫': 20, '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫': 15,
                         '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω': 15, '–ö—ñ—Ç–∏–∫ –≤–∞–º–ø—ñ—Ä': 15, '–ö—ñ—Ç–∏–∫ –∫–æ–º—É–Ω—ñ—Å—Ç': 15, '–ù–∞—Ä–∫—ñ—Ç': 15}
            clas = self.c.execute("SELECT class FROM user_data WHERE user_id = ? AND chat_id = ?",
                                  (user_id, chat_id)).fetchone()[0]
            self.c.execute("UPDATE user_data SET wanna_play = ? WHERE user_id = ? AND chat_id = ?",
                           ('–ù—ñ', user_id, chat_id))
            self.c.execute("UPDATE user_data SET not_play_times = ? WHERE user_id = ? AND chat_id = ?",
                           (0, user_id, chat_id))
            self.conn.commit()
            self.change_happiness(user_id, chat_id, happiness[clas])

    def change_job(self, user_id: int, chat_id: int, new_job: str):
        with self.conn:
            self.c.execute("UPDATE user_data SET job = ? WHERE user_id = ? AND chat_id = ?",
                           (new_job, user_id, chat_id))
            self.conn.commit()

    def change_job_status(self, user_id: int, chat_id: int):
        with self.conn:
            self.c.execute("UPDATE user_data SET job_status = ? WHERE user_id = ? AND chat_id = ?",
                           ('–ù–∞ —Ä–æ–±–æ—Ç—ñ', user_id, chat_id))
            self.conn.commit()

    def change_job_changes(self, user_id: int, chat_id: int, target: str):
        with self.conn:
            job_changes = self.c.execute("SELECT job_changes FROM user_data WHERE user_id = ? AND chat_id = ?",
                                         (user_id, chat_id)).fetchone()[0]
            if target == '-' and job_changes > 0:
                job_changes = job_changes - 1
            elif target == '+':
                job_changes = job_changes + 1
            self.c.execute("UPDATE user_data SET job_changes = ? WHERE user_id = ? AND chat_id = ?",
                           (job_changes, user_id, chat_id))
            self.conn.commit()

    def vacation(self, user_id: int, chat_id: int, place: str):
        with self.conn:
            self.c.execute("UPDATE user_data SET job_status = ? WHERE user_id = ? AND chat_id = ?",
                           ("–£ –≤—ñ–¥–ø—É—Å—Ç—Ü—ñ", user_id, chat_id))
            self.c.execute("UPDATE user_data SET vacation_place = ? WHERE user_id = ? AND chat_id = ?",
                           (place, user_id, chat_id))

    def vacation_days(self, user_id: int, chat_id: int, days: int):
        with self.conn:
            self.c.execute("UPDATE user_data SET vacation_hours = ? WHERE user_id = ? AND chat_id = ?",
                           (days*24, user_id, chat_id))

    def married_get_user2(self, chat_id: int, name):
        with self.conn:
            return self.c.execute("SELECT user_id FROM user_data WHERE name = ? AND chat_id = ?",
                                  (name, chat_id)).fetchone()[0]

    def married_get_data(self, chat_id: int, command: str, target: str):
        with self.conn:
            if target == 'name':
                return self.c.execute("SELECT name FROM user_data WHERE command = ? AND chat_id = ?",
                                      (command, chat_id)).fetchone()[0]
            elif target == 'user_id':
                return self.c.execute("SELECT user_id FROM user_data WHERE command = ? AND chat_id = ?",
                                      (command, chat_id)).fetchone()[0]

    def married_set_users(self, chat_id: int, user_id: int, user2_id: int):
        with self.conn:
            self.c.execute("UPDATE user_data SET married = ? WHERE user_id = ? AND chat_id = ?",
                           (1, user_id, chat_id))
            self.c.execute("UPDATE user_data SET user2_id = ? WHERE user_id = ? AND chat_id = ?",
                           (user2_id, user_id, chat_id))

    def married_break(self, chat_id: int, user_id: int):
        with self.conn:
            self.c.execute("UPDATE user_data SET married = ? WHERE user_id = ? AND chat_id = ?",
                           (2, user_id, chat_id))

    def kittens(self, chat_id: int, user_id: int, user2_id: int):
        with self.conn:
            kittens = random.choice([3, 4, 5])
            picture = random.choice(kitten_photos) + '.jpg'
            kitten_type = random.choice(kitten_types[self.get_data(user_id, chat_id, 'type') +
                                                     self.get_data(user2_id, chat_id, 'type')])
            self.c.execute("UPDATE user_data SET kittens = ? WHERE chat_id = ? AND user_id = ? AND user2_id = ?",
                           (kittens, chat_id, user_id, user2_id))
            self.c.execute("UPDATE user_data SET kitten_photo = ? WHERE chat_id = ? AND user_id = ? AND user2_id = ?",
                           (picture, chat_id, user_id, user2_id))
            self.c.execute("UPDATE user_data SET kitten_type = ? WHERE chat_id = ? AND user_id = ? AND user2_id = ?",
                           (kitten_type, chat_id, user_id, user2_id))
            self.c.execute("UPDATE user_data SET mother_id = ? WHERE chat_id = ? AND user_id = ? AND user2_id = ?",
                           (user_id, chat_id, user_id, user2_id))
            self.c.execute("UPDATE user_data SET father_id = ? WHERE chat_id = ? AND user_id = ? AND user2_id = ?",
                           (user2_id, chat_id, user_id, user2_id))
            self.c.execute("UPDATE user_data SET kittens = ? WHERE chat_id = ? AND user_id = ? AND user2_id = ?",
                           (kittens, chat_id, user2_id, user_id))
            self.c.execute("UPDATE user_data SET kitten_photo = ? WHERE chat_id = ? AND user_id = ? AND user2_id = ?",
                           (picture, chat_id, user2_id, user_id))
            self.c.execute("UPDATE user_data SET kitten_type = ? WHERE chat_id = ? AND user_id = ? AND user2_id = ?",
                           (kitten_type, chat_id, user2_id, user_id))
            self.c.execute("UPDATE user_data SET mother_id = ? WHERE chat_id = ? AND user_id = ? AND user2_id = ?",
                           (user2_id, chat_id, user2_id, user_id))
            self.c.execute("UPDATE user_data SET father_id = ? WHERE chat_id = ? AND user_id = ? AND user2_id = ?",
                           (user_id, chat_id, user2_id, user_id))
            self.conn.commit()

    def all_feed(self):
        with self.conn:
            max_ = {'–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫': 4, '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫': 3, '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫': 5, '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫': 4,
                    '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω': 5, '–ö—ñ—Ç–∏–∫ –≤–∞–º–ø—ñ—Ä': 5, '–ö—ñ—Ç–∏–∫ –∫–æ–º—É–Ω—ñ—Å—Ç': 5, '–ù–∞—Ä–∫—ñ—Ç': 5}
            max_id = self.c.execute("SELECT MAX(id) FROM user_data").fetchall()[0][0]
            for i in range(1, max_id + 1):
                if self.c.execute("SELECT health FROM user_data WHERE id = ?", (i,)).fetchone()[0] == '–ó–¥–æ—Ä–æ–≤':
                    feed_limit = self.c.execute("SELECT feed_limit FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                    if feed_limit < max_[self.c.execute("SELECT class FROM user_data WHERE id = ?", (i,)).fetchone()[0]]:
                        self.c.execute("UPDATE user_data SET feed_limit = ? WHERE id = ?", (feed_limit + 1, i))
            self.conn.commit()

    def all_hungry(self):
        with self.conn:
            hungry_minus = {'–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫': 5, '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫': 5, '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫': 6, '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫': 5,
                            '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω': 5, '–ö—ñ—Ç–∏–∫ –≤–∞–º–ø—ñ—Ä': 5, '–ö—ñ—Ç–∏–∫ –∫–æ–º—É–Ω—ñ—Å—Ç': 5, '–ù–∞—Ä–∫—ñ—Ç': 5}
            max_id = self.c.execute("SELECT MAX(id) FROM user_data").fetchall()[0][0]
            for i in range(1, max_id + 1):
                if self.c.execute("SELECT health FROM user_data WHERE id = ?", (i,)).fetchone()[0] == '–ó–¥–æ—Ä–æ–≤':
                    hungry = self.c.execute("SELECT hungry FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                    if hungry != 0:
                        clas = self.c.execute("SELECT class FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                        if hungry - hungry_minus[clas] > 0:
                            hungry = hungry - hungry_minus[clas]
                        else:
                            hungry = 0
                        self.c.execute("UPDATE user_data SET hungry = ? WHERE id = ?", (hungry, i))
                    else:
                        happiness = self.c.execute("SELECT happiness FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                        if happiness - 5 > 0:
                            happiness = happiness - 5
                        else:
                            happiness = 0
                        self.c.execute("UPDATE user_data SET happiness = ? WHERE id = ?", (happiness, i))
            self.conn.commit()

    def all_wanna_play(self):
        with self.conn:
            play_chance = {'–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫': ['–ù—ñ', '–¢–∞–∫'], '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫': ['–ù—ñ', '–ù—ñ', '–ù—ñ', '–¢–∞–∫'],
                           '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫': ['–ù—ñ', '–¢–∞–∫', '–¢–∞–∫', '–¢–∞–∫'], '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫': ['–ù—ñ', '–¢–∞–∫'],
                           '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω': ['–ù—ñ', '–¢–∞–∫'], '–ö—ñ—Ç–∏–∫ –≤–∞–º–ø—ñ—Ä': ['–ù—ñ', '–¢–∞–∫'],
                           '–ö—ñ—Ç–∏–∫ –∫–æ–º—É–Ω—ñ—Å—Ç': ['–ù—ñ', '–¢–∞–∫'], '–ù–∞—Ä–∫—ñ—Ç': ['–ù—ñ', '–¢–∞–∫']}
            max_id = self.c.execute("SELECT MAX(id) FROM user_data").fetchall()[0][0]
            for i in range(1, max_id + 1):
                if self.c.execute("SELECT health FROM user_data WHERE id = ?", (i,)).fetchone()[0] == '–ó–¥–æ—Ä–æ–≤':
                    wanna_play = self.c.execute("SELECT wanna_play FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                    if wanna_play != '–¢–∞–∫':
                        clas = self.c.execute("SELECT class FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                        self.c.execute("UPDATE user_data SET wanna_play = ? WHERE id = ?", (random.choice(play_chance[clas]), i))
                    else:
                        not_play_times = self.c.execute("SELECT not_play_times FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                        if not_play_times < 5:
                            self.c.execute("UPDATE user_data SET not_play_times = ? WHERE id = ?", (not_play_times + 1, i))
                        else:
                            happiness = self.c.execute("SELECT happiness FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                            if happiness - 10 > 0:
                                happiness = happiness - 10
                            else:
                                happiness = 0
                            self.c.execute("UPDATE user_data SET happiness = ? WHERE id = ?", (happiness, i))
            self.conn.commit()

    def all_working(self):
        with self.conn:
            job_money = {'–ë—ñ–∑–Ω–µ—Å–º–µ–Ω': 5, '–ë–∞–Ω–∫—ñ—Ä': 5, '–û—Ñ—ñ—Ü—ñ–∞–Ω—Ç': 5, '–ë—É–¥—ñ–≤–µ–ª—å–Ω–∏–∫': 5,
                         '–í—ñ–π—Å—å–∫–æ–≤–∏–π': 5, '–®–ø–∏–≥—É–Ω': 5, '–ü—Å–∏—Ö–æ–ª–æ–≥': 5, '–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç': 5,
                         '–í—á–µ–Ω–∏–π': 5, '–°–æ–º—ñ–ª—å—î': 5, '–ú–µ–Ω–µ–¥–∂–µ—Ä': 5, '–Ü–Ω–≤–µ—Å—Ç–æ—Ä': 5,
                         '–ö—É—Ö–∞—Ä': 5, '–õ—å–æ—Ç—á–∏–∫': 5, '–ñ—É—Ä–Ω–∞–ª—ñ—Å—Ç': 5, '–ö–æ—Å–º–æ–Ω–∞–≤—Ç': 5}
            max_id = self.c.execute("SELECT MAX(id) FROM user_data").fetchall()[0][0]
            for i in range(1, max_id + 1):
                if self.c.execute("SELECT health FROM user_data WHERE id = ?", (i,)).fetchone()[0] == '–ó–¥–æ—Ä–æ–≤':
                    if self.c.execute("SELECT job_status FROM user_data WHERE id = ?", (i,)).fetchone()[0] == '–ù–∞ —Ä–æ–±–æ—Ç—ñ':
                        job = self.c.execute("SELECT job FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                        money = self.c.execute("SELECT money FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                        job_hours = self.c.execute("SELECT job_hours FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                        self.c.execute("UPDATE user_data SET money = ? WHERE id = ?", (money + job_money[job], i))
                        self.c.execute("UPDATE user_data SET job_hours = ? WHERE id = ?", (job_hours + 1, i))
                    elif self.c.execute("SELECT job_status FROM user_data WHERE id = ?", (i,)).fetchone()[0] == '–£ –≤—ñ–¥–ø—É—Å—Ç—Ü—ñ':
                        vacation_hours = self.c.execute("SELECT vacation_hours FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                        self.c.execute("UPDATE user_data SET vacation_hours = ? WHERE id = ?", (vacation_hours - 1, i))

            self.conn.commit()

    def all_stop_working(self):
        with self.conn:
            max_id = self.c.execute("SELECT MAX(id) FROM user_data").fetchall()[0][0]
            for i in range(1, max_id + 1):
                if self.c.execute("SELECT health FROM user_data WHERE id = ?", (i,)).fetchone()[0] == '–ó–¥–æ—Ä–æ–≤' and \
                        self.c.execute("SELECT job_status FROM user_data WHERE id = ?", (i,)).fetchone()[0] == '–ù–∞ —Ä–æ–±–æ—Ç—ñ':
                    self.c.execute("UPDATE user_data SET job_status = ? WHERE id = ?", ('–ù–µ –ø—Ä–∞—Ü—é—î', i))
            self.conn.commit()

    def not_doing(self):
        with self.conn:
            max_id = self.c.execute("SELECT MAX(id) FROM user_data").fetchall()[0][0]
            for i in range(1, max_id + 1):
                if self.c.execute("SELECT health FROM user_data WHERE id = ?", (i,)).fetchone()[0] == '–ó–¥–æ—Ä–æ–≤':
                    hungry = self.c.execute("SELECT hungry FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                    happiness = self.c.execute("SELECT happiness FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                    if hungry == 0 and happiness == 0:
                        zero_times = self.c.execute("SELECT zero_times FROM user_data WHERE id = ?", (i,)).fetchone()[0]
                        if zero_times < 6:
                            self.c.execute("UPDATE user_data SET zero_times = ? WHERE id = ?", (zero_times + 1, i))
                        else:
                            self.c.execute("UPDATE user_data SET health = ? WHERE id = ?", ('–ú–µ—Ä—Ç–≤–∏–π', i))
                            self.c.execute("UPDATE user_data SET kill_ever = ? WHERE id = ?", (3, i))
            self.conn.commit()

    def get_data(self, user_id: int, chat_id: int, target: str):
        with self.conn:
            rz = {0: '—Ä–∞–∑—ñ–≤', 1: '—Ä–∞–∑', 2: '—Ä–∞–∑–∞', 3: '—Ä–∞–∑–∏', 4: '—Ä–∞–∑–∏', 5: '—Ä–∞–∑',
                  6: '—Ä–∞–∑', 7: '—Ä–∞–∑', 8: '—Ä–∞–∑', 9: '—Ä–∞–∑', 10: '—Ä–∞–∑'}
            a = {'photo': 3, 'name': 4, 'level': 5, 'under_level': 6, 'type': 7, 'class': 8,
                 'hungry': 9, 'feed_limit': 10, 'wanna_play': 11, 'not_play_times': 12, 'happiness': 13,
                 'zero_times': 14, 'health': 15, 'job': 16, 'job_status': 17, 'job_hours': 18, 'money': 19,
                 'command': 20, 'name_sets': 21, 'kill_ever': 22, 'alive': 23, 'job_changes': 24, 'married': 25,
                 'user2_id': 26, 'kittens': 27, 'kitten_photo': 28, 'kitten_level': 29,
                 'kitten_type': 30, 'mother_id': 31, 'father_id': 32, 'vacation_place': 33, 'vacation_hours': 34}
            list_ = list(self.c.execute("SELECT * FROM user_data WHERE user_id = ? AND chat_id = ?", (user_id, chat_id)).fetchone())
            if target == 'cat_data':
                return f"üê±–Ü–º'—è: {list_[4]}\nüß∂–°—Ç–∞—Ç—É—Å: {list_[5]}\n‚ú®–†—ñ–≤–µ–Ω—å: {list_[6]}/50\n" \
                       f"‚ùáÔ∏è–¢–∏–ø: {list_[7]}\nüßø–ö–ª–∞—Å: {list_[8]}\nü•©–°–∏—Ç—ñ—Å—Ç—å: {list_[9]}/100\n" \
                       f"üåà–†—ñ–≤–µ–Ω—å —â–∞—Å—Ç—è: {list_[13]}/100\n"
            elif target == 'cat_info':
                info = f"üê±–Ü–º'—è: {list_[4]}\nü•©–ú–æ–∂–Ω–∞ –ø–æ–≥–æ–¥—É–≤–∞—Ç–∏: {list_[10]} {rz[list_[10]]}\nüß©–•–æ—á–µ –≥—Ä–∞—Ç–∏—Å—è: {list_[11]}\n"
                if int(self.get_data(user_id, chat_id, 'under_level')) >= 5:
                    info = info + f"üí∞–í–∞—à –±–∞–ª–∞–Ω—Å: {list_[19]}\n"
                if int(self.get_data(user_id, chat_id, 'under_level')) >= 15:
                    if list_[25] == 0:
                        family = "–ù–µ–º–∞"
                    elif list_[25] == 1:
                        family = self.get_data(list_[26], chat_id, 'name')
                    elif list_[25] == 2:
                        family = f"–†–æ–∑–ª—É—á–µ–Ω–∏–π –∑ {self.get_data(list_[26], chat_id, 'name')}"
                    info = info + f"‚ù§Ô∏è–°—ñ–º'—è: {family}\n"
                return info
            elif target == 'cat_job':
                return f"üõ†–ü—Ä–æ—Ñ–µ—Å—ñ—è: {list_[16]}\nüõ†–°—Ç–∞—Ç—É—Å: {list_[17]}\nüõ†–í—ñ–¥–ø—Ä–∞—Ü—å–æ–≤–∞–Ω—ñ –≥–æ–¥–∏–Ω–∏: {list_[18]}\n"
            elif target == 'kitten_data':
                return f"–í–∞—à—ñ –∫–æ—à–µ–Ω—è—Ç–∫–∞\n\n‚ù§Ô∏è–ú–∞–º–∞ —ñ —Ç–∞—Ç–æ: {self.get_data(list_[31], chat_id, 'name')} " \
                       f"—ñ {self.get_data(list_[32], chat_id, 'name')}\nüê±–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {list_[27]}\n" \
                       f"‚ùáÔ∏è–¢–∏–ø: {list_[30]}\n‚ú®–†—ñ–≤–µ–Ω—å: {list_[29]}\n"
            else:
                return list_[a[target]]
