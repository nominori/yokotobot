from aiogram import Bot, Dispatcher, executor, types
import asyncio
import logging
from config import TOKEN, Bot_ID
from database import Database
from Buttons import *

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
data = Database()

text = {'/start': "–©–æ–± –Ω–∞—Ä–µ—à—Ç—ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤–æ–≥–æ –∫–æ—Ç–∏–∫–∞, –¥–æ–¥–∞–π –º–µ–Ω–µ –≤ –≥—Ä—É–ø—É –∑ –¥—Ä—É–∑—è–º–∏ —ñ –Ω–∞–¥–∞–π —É—Å—ñ –ø—Ä–∞–≤–∞!",
        '/commands': "–ë–∞–∑–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏\n<u><i><b>–•–æ—á—É –∫–æ—Ç–∏–∫–∞</b></i></u> - –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∏–ª–æ–≥–æ –∫—ñ—Ç–∏–∫–∞\n"
                     "<u><i><b>–ú—ñ–π –∫–æ—Ç–∏–∫</b></i></u> - –¥–∞–Ω–Ω—ñ –≤–∞—à–æ–≥–æ –∫–æ—Ç–∏–∫–∞\n"
                     "<u><i><b>–ö–æ—Ç–∏–∫ —ñ–Ω—Ñ–æ</b></i></u> - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ç–∏–∫–∞\n"
                     "<u><i><b>–ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è</b></i></u> - –¥–∞—Ç–∏ –∫–æ—Ç–∏–∫—É –Ω–æ–≤–µ —ñ–º'—è\n"
                     "<u><i><b>–ù–∞–≥–æ–¥—É–≤–∞—Ç–∏</b></i></u> - –Ω–∞–≥–æ–¥—É–≤–∞—Ç–∏\n"
                     "<u><i><b>–ü–æ–≥—Ä–∞—Ç–∏—Å—å</b></i></u> - –ø–æ–≥—Ä–∞—Ç–∏—Å—å\n",
        '/manual': "–•–æ—á–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —É—Å—ñ –∫–æ–º–∞–Ω–¥–∏ —ñ –≤—Å—ñ —Ç–æ–Ω–∫–æ—â—ñ: <a>https://telegra.ph/Kotobot-Manual-08-03</a>"}
rz = {0: '—Ä–∞–∑—ñ–≤', 1: '—Ä–∞–∑', 2: '—Ä–∞–∑–∞', 3: '—Ä–∞–∑–∏', 4: '—Ä–∞–∑–∏', 5: '—Ä–∞–∑',
      6: '—Ä–∞–∑', 7: '—Ä–∞–∑', 8: '—Ä–∞–∑', 9: '—Ä–∞–∑', 10: '—Ä–∞–∑'}


async def send_data1(user_id, chat_id):
    photo = open(data.get_data(user_id, chat_id, 'photo'), 'rb')
    await bot.send_photo(chat_id, photo, caption=data.get_data(user_id, chat_id, 'all1'), reply_markup=CatData)


async def send_data2(user_id, chat_id):
    action_cat = InlineKeyboardMarkup()
    if int(data.get_data(user_id, chat_id, 'feed_limit')) > 0:
        action_cat.add(FeedCatButton)
    if data.get_data(user_id, chat_id, 'wanna_play') == '–¢–∞–∫':
        action_cat.add(PlayCatButton)
    if data.get_data(user_id, chat_id, 'job_status') == '–ù–µ –ø—Ä–∞—Ü—é—î':
        action_cat.add(JobCatButton)
    await bot.send_message(chat_id, data.get_data(user_id, chat_id, 'all2'), reply_markup=action_cat)


@dp.message_handler(commands=['start', 'commands', 'manual'])
async def start(message: types.Message):
    if message.text == '/start' and message.chat.type == 'private':
        await bot.send_message(message.chat.id, text[message.text], reply_markup=AddGroup)
    elif message.text in ['/commands', f'/commands{Bot_ID}']:
        await bot.send_message(message.chat.id, text['/commands'], parse_mode='HTML')
    elif message.text in ['/manual', f'/manual{Bot_ID}']:
        await bot.send_message(message.chat.id, text['/manual'], parse_mode='HTML')


@dp.message_handler(text=['–•–æ—á—É –∫–æ—Ç–∏–∫–∞', f'{Bot_ID} –•–æ—á—É –∫–æ—Ç–∏–∫–∞'])
async def add(message: types.Message):
    user_id, chat_id = message.from_user.id, message.chat.id
    if message.chat.type in ['group', 'supergroup']:
        if data.user_exist(user_id, chat_id) == 1:
            if int(data.get_data(user_id, chat_id, 'kill_ever')) == 2:
                await bot.send_message(chat_id, "–í–±–∏–≤—Ü—è–º –Ω–µ –¥–∞–≤–∞–ª–∏ —Å–ª–æ–≤–∞üò°")
            elif int(data.get_data(user_id, chat_id, 'kill_ever')) == 3:
                await bot.send_message(chat_id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –º–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ç–∏–∫–∞, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–∞—à –Ω–∏–Ω—ñ—à–Ω—ñ–π –∫–æ—Ç–∏–∫ –ø–æ–º–µ—Ä –∑ –≥–æ–ª–æ–¥—É")
            else:
                await bot.send_message(chat_id, "–¢–∏ –≤–∂–µ –º–∞—î—à –∫—ñ—Ç–∏–∫–∞!", reply_markup=MyCat)
        else:
            data.add_user(user_id, chat_id)
            photo = open(data.get_data(user_id, chat_id, 'photo'), 'rb')
            name_sets = int(data.get_data(user_id, chat_id, 'name_sets'))
            await bot.send_photo(chat_id, photo, caption=f"–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –Ω–æ–≤–æ–≥–æ –∫—ñ—Ç–∏–∫–∞üéÅ")
            await bot.send_message(chat_id, f"–ù–∞–ø–∏—à–∏ —ñ–º'—è (–ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ {name_sets} {rz[name_sets]})")
            data.change_command(user_id, chat_id, "–ù–æ–≤–µ —ñ–º'—è")
    else:
        await bot.send_message(chat_id, "–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ç–∏–∫–∞ –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø—ñ! "
                                        "–î–æ–¥–∞–π –º–µ–Ω–µ —ñ –Ω–∞–¥–∞–π —É—Å—ñ –ø—Ä–∞–≤–∞!", reply_markup=AddGroup)


@dp.message_handler(text=["–ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è", '–ú—ñ–π –∫–æ—Ç–∏–∫', f'{Bot_ID} –ú—ñ–π –∫–æ—Ç–∏–∫',
                          f'{Bot_ID} –ù–∞–≥–æ–¥—É–≤–∞—Ç–∏', '–ù–∞–≥–æ–¥—É–≤–∞—Ç–∏', f'{Bot_ID} –ü–æ–≥—Ä–∞—Ç–∏—Å—å', '–ü–æ–≥—Ä–∞—Ç–∏—Å—å',
                          '–û–±—Ä–∞—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ—é', f'{Bot_ID} –û–±—Ä–∞—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ—é',
                          '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏', f'{Bot_ID} –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏', '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —É –≤—ñ–¥–ø—É—Å—Ç–∫—É',
                          '–ö–æ—Ç–∏–∫ —ñ–Ω—Ñ–æ', f'{Bot_ID} –ö–æ—Ç–∏–∫ —ñ–Ω—Ñ–æ', '–í–æ—Å–∫—Ä–µ—Å–∏—Ç–∏ –º–æ–≥–æ –∫–æ—Ç–∏–∫–∞',
                          '–í–±–∏—Ç–∏ –∫–æ—Ç–∏–∫–∞', '–ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–±–æ—Ç—É', "–ó–∞–≤–µ—Å—Ç–∏ —Å—ñ–º'—é", "–†–æ–∑–ª—É—á–∏—Ç–∏—Å—å",
                          "–ó–∞–≤–µ—Å—Ç–∏ –∫–æ—à–µ–Ω—è—Ç–æ–∫", "–ú–æ—ó –∫–æ—à–µ–Ω—è—Ç–∫–∞", f"{Bot_ID} –ú–æ—ó –∫–æ—à–µ–Ω—è—Ç–∫–∞"])
async def commands(message: types.Message):
    jobs_choice = {'–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫': CatJob, '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫': CatJob1,
                   '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫': CatJob2, '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫': CatJob3, '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω': CatJob4}
    user_id, chat_id = message.from_user.id, message.chat.id
    if message.chat.type in ['group', 'supergroup']:
        if data.user_exist(user_id, chat_id) == 1:
            if int(data.get_data(user_id, chat_id, 'kill_ever')) == 2:
                await bot.send_message(chat_id, "–í–±–∏–≤—Ü—è–º –Ω–µ –¥–∞–≤–∞–ª–∏ —Å–ª–æ–≤–∞üò°")
            elif int(data.get_data(user_id, chat_id, 'kill_ever')) == 3:
                if message.text == '–í–æ—Å–∫—Ä–µ—Å–∏—Ç–∏ –º–æ–≥–æ –∫–æ—Ç–∏–∫–∞':
                    if int(data.get_data(user_id, chat_id, 'alive')) == 0:
                        data.alive(user_id, chat_id)
                        await bot.send_message(chat_id, "–í–∞—à –∫–æ—Ç–∏–∫ –±—É–¥–µ –∂–∏—Ç–∏, –∞–ª–µ –Ω–µ –∑–∞–±—É–≤–∞–π—Ç–µ –π–æ–≥–æ –¥–æ–≥–ª—è–¥–∞—Ç–∏, "
                                                        "–±–æ –±—ñ–ª—å—à–µ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤–æ—Å–∫—Ä–µ—Å–∏—Ç–∏ —É –≤–∞—Å –Ω–µ –±—É–¥–µ")
                    else:
                        await bot.send_message(chat_id, "–ù–∞ –∂–∞–ª—å, –≤–∞—à–æ–≥–æ –∫–æ—Ç–∏–∫–∞ –±—ñ–ª—å—à–µ –Ω–µ –º–æ–∂–Ω–∞ –≤–æ—Å–∫—Ä–µ—Å–∏—Ç–∏")
                else:
                    await bot.send_message(chat_id, "–ù–∞ –∂–∞–ª—å, –≤–∞—à –∫–æ—Ç–∏–∫ –≤–º–µ—Ä –∑ –≥–æ–ª–æ–¥—É, —è–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–æ—Å–∫—Ä–µ—Å–∏—Ç–∏ "
                                                    "–π–æ–≥–æ –ø—Ä–æ–ø–∏—à—ñ—Ç—å <u><i><b>–í–æ—Å–∫—Ä–µ—Å–∏—Ç–∏ –º–æ–≥–æ –∫–æ—Ç–∏–∫–∞</b></i></u>",
                                           parse_mode='HTML')
            else:
                if message.text == "–ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è":
                    name_sets = int(data.get_data(user_id, chat_id, 'name_sets'))
                    if name_sets > 0:
                        await bot.send_message(chat_id, f"–ù–∞–ø–∏—à–∏ —ñ–º'—è (–ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ {name_sets} {rz[name_sets]})")
                        data.change_command(user_id, chat_id, "–ù–æ–≤–µ —ñ–º'—è")
                    else:
                        await bot.send_message(chat_id, "–í–∏ –±—ñ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —ñ–º'—è —Å–≤–æ–≥–æ –∫–æ—Ç–∏–∫–∞")
                elif message.text in ['–ú—ñ–π –∫–æ—Ç–∏–∫', f'{Bot_ID} –ú—ñ–π –∫–æ—Ç–∏–∫']:
                    await send_data1(user_id, chat_id)
                elif message.text in ['–ö–æ—Ç–∏–∫ —ñ–Ω—Ñ–æ', f'{Bot_ID} –ö–æ—Ç–∏–∫ —ñ–Ω—Ñ–æ']:
                    await send_data2(user_id, chat_id)
                elif message.text in [f'{Bot_ID} –ù–∞–≥–æ–¥—É–≤–∞—Ç–∏', '–ù–∞–≥–æ–¥—É–≤–∞—Ç–∏']:
                    feed_limit = int(data.get_data(user_id, chat_id, 'feed_limit'))
                    if feed_limit == 0:
                        await bot.send_message(chat_id, "–í–∏ –ø–æ–≥–æ–¥—É–≤–∞–ª–∏ –∫—ñ—Ç–∏–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞–∑")
                    else:
                        a1 = int(data.get_data(user_id, chat_id, 'under_level'))
                        b1 = data.get_data(user_id, chat_id, 'level')
                        data.change_hungry(user_id, chat_id)
                        a2 = int(data.get_data(user_id, chat_id, 'under_level'))
                        b2 = data.get_data(user_id, chat_id, 'level')
                        feed_limit = int(data.get_data(user_id, chat_id, 'feed_limit'))
                        await bot.send_message(chat_id, f"–í–∏ –ø–æ–≥–æ–¥—É–≤–∞–ª–∏ –∫—ñ—Ç–∏–∫–∞! (–ú–æ–∂–Ω–∞ –ø–æ–≥–æ–¥—É–≤–∞—Ç–∏ —â–µ "
                                                        f"{feed_limit} {rz[feed_limit]})")
                        if b1 != b2:
                            await bot.send_message(chat_id, "–°—Ç–∞—Ç—É—Å –ø—ñ–¥–≤–∏—â–µ–Ω–Ω–æ!")
                        elif a2 > a1:
                            await bot.send_message(chat_id, "–†—ñ–≤–µ–Ω—å –ø—ñ–¥–≤–∏—â–µ–Ω–Ω–æ!")
                elif message.text in [f'{Bot_ID} –ü–æ–≥—Ä–∞—Ç–∏—Å—å', '–ü–æ–≥—Ä–∞—Ç–∏—Å—å']:
                    if data.get_data(user_id, chat_id, 'wanna_play') == '–ù—ñ':
                        await bot.send_message(chat_id, "–ö–æ—Ç–∏–∫ –Ω–µ —Ö–æ—á–µ –≥—Ä–∞—Ç–∏—Å—è")
                    else:
                        data.change_wanna_play(user_id, chat_id)
                        await bot.send_message(chat_id, "–ö–æ—Ç–∏–∫ –≥—Ä–∞—î—Ç—å—Å—è")
                elif message.text == '–í–æ—Å–∫—Ä–µ—Å–∏—Ç–∏ –º–æ–≥–æ –∫–æ—Ç–∏–∫–∞':
                    await bot.send_message(chat_id, "–í–æ—Å–∫—Ä–µ—Å–∏—Ç–∏ –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ –º–µ—Ä—Ç–≤–æ–≥–æ –∫–æ—Ç–∏–∫–∞")
                elif message.text == '–í–±–∏—Ç–∏ –∫–æ—Ç–∏–∫–∞':
                    if int(data.get_data(user_id, chat_id, 'kill_ever')) in [0, 1, 4]:
                        data.change_command(user_id, chat_id, '–í–±–∏—Ç–∏ –∫–æ—Ç–∏–∫–∞')
                        await bot.send_message(chat_id, "–í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏? (–Ω–∞–ø–∏—à—ñ—Ç—å '–ù—ñ' –∞–±–æ "
                                                        "'T–∞–∫, —è —Ö–æ—á—É –≤–±–∏—Ç–∏ —Å–≤–æ–≥–æ –∫–æ—Ç–∏–∫–∞' —è–∫—â–æ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ)")
                    else:
                        await bot.send_message(chat_id, "–í–∞—à –∫—ñ—Ç —ñ —Ç–∞–∫ –º–µ—Ä—Ç–≤–∏–π")
                elif message.text == '–û–±—Ä–∞—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ—é':
                    if data.get_data(user_id, chat_id, 'level') != '–ö–æ—à–µ–Ω—è—Ç–∫–æ':
                        if data.get_data(user_id, chat_id, 'job') == '–ù–µ–º–∞':
                            a = data.get_data(user_id, chat_id, 'class')
                            if a in ['–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫', '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫', '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫',
                                     '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫', '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω']:
                                await bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–±–æ—Ç—É", reply_markup=jobs_choice[a])
                            else:
                                await bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–±–æ—Ç—É", reply_markup=CatJob5)
                        else:
                            await bot.send_message(chat_id, "–í–∏ –≤–∂–µ –º–∞—î—Ç–µ —Ä–æ–±–æ—Ç—É!")
                    else:
                        await bot.send_message(chat_id, "–í–∞—à–µ –∫–æ—à–µ–Ω—è —â–µ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–µ–Ω—å–∫–µ")
                elif message.text in ['–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏', f'{Bot_ID} –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏']:
                    if data.get_data(user_id, chat_id, 'job') == '–ù–µ–º–∞':
                        await bot.send_message(chat_id, "–í–∏ —â–µ –Ω–µ –æ–±—Ä–∞–ª–∏ –ø—Ä–æ—Ñ–µ—Å—ñ—é!")
                    else:
                        if data.get_data(user_id, chat_id, 'job_status') == '–ù–µ –ø—Ä–∞—Ü—é—î':
                            data.change_job_status(user_id, chat_id)
                            await bot.send_message(chat_id, "–í–∞—à –∫–æ—Ç–∏–∫ –ø—ñ—à–æ–≤ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏!")
                        else:
                            await bot.send_message(chat_id, "–í–∞—à –∫–æ—Ç–∏–∫ –≤–∂–µ –ø—Ä–∞—Ü—é—î!")
                elif message.text == '–ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–±–æ—Ç—É':
                    if data.get_data(user_id, chat_id, 'job') != '–ù–µ–º–∞':
                        if int(data.get_data(user_id, chat_id, 'under_level')) < 15:
                            await bot.send_message(chat_id, "–°–ø–æ—á–∞—Ç–∫—É –≤–∞—à –∫–æ—Ç–∏–∫ –º–∞—î –¥–æ—Å—è–≥–Ω—É—Ç–∏ 15 —Ä—ñ–≤–Ω—è!")
                        else:
                            if int(data.get_data(user_id, chat_id, 'job_changes')) > 0:
                                a = data.get_data(user_id, chat_id, 'class')
                                if a in ['–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫', '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫', '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫',
                                         '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫', '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω']:
                                    await bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É —Ä–æ–±–æ—Ç—É", reply_markup=jobs_choice[a])
                                else:
                                    await bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É —Ä–æ–±–æ—Ç—É", reply_markup=CatJob5)
                            else:
                                if 15 <= int(data.get_data(user_id, chat_id, 'under_level')) < 25:
                                    await bot.send_message(chat_id, "–í–∏ –≤–∂–µ –∑–º—ñ–Ω–∏–ª–∏ —Ä–æ–±–æ—Ç—É, –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä–∞–∑ –º–æ–∂–Ω–∞ "
                                                                    "–±—É–¥–µ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏ –ø—ñ—Å–ª—è 25 —Ä—ñ–≤–Ω—è!")
                                elif 25 <= int(data.get_data(user_id, chat_id, 'under_level')) < 35:
                                    await bot.send_message(chat_id, "–í–∏ –≤–∂–µ –∑–º—ñ–Ω–∏–ª–∏ —Ä–æ–±–æ—Ç—É, –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä–∞–∑ –º–æ–∂–Ω–∞ "
                                                                    "–±—É–¥–µ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏ –ø—ñ—Å–ª—è 35 —Ä—ñ–≤–Ω—è!")
                                elif 35 <= int(data.get_data(user_id, chat_id, 'under_level')) < 45:
                                    await bot.send_message(chat_id, "–í–∏ –≤–∂–µ –∑–º—ñ–Ω–∏–ª–∏ —Ä–æ–±–æ—Ç—É, –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä–∞–∑ –º–æ–∂–Ω–∞ "
                                                                    "–±—É–¥–µ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏ –ø—ñ—Å–ª—è 45 —Ä—ñ–≤–Ω—è!")
                                else:
                                    await bot.send_message(chat_id, "–í–∏ –±—ñ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ä–æ–±–æ—Ç—É")
                    else:
                        await bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ–º–∞—î —Ä–æ–±–æ—Ç–∏. –°–ø–æ—á–∞—Ç–∫—É –ø–æ—á–Ω—ñ—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏!")
                elif message.text == '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —É –≤—ñ–¥–ø—É—Å—Ç–∫—É':
                    pass
                elif message.text == "–ó–∞–≤–µ—Å—Ç–∏ —Å—ñ–º'—é":
                    if int(data.get_data(user_id, chat_id, 'under_level')) < 15:
                        await bot.send_message(chat_id, "–°–ø–æ—á–∞—Ç–∫—É –≤–∞—à –∫–æ—Ç–∏–∫ –º–∞—î –¥–æ—Å—è–≥–Ω—É—Ç–∏ 15 —Ä—ñ–≤–Ω—è!")
                    elif int(data.get_data(user_id, chat_id, 'married')) == 1:
                        await bot.send_message(chat_id, "–í–∏ –≤–∂–µ –º–∞—î—Ç–µ —Å—ñ–º'—é")
                    else:
                        await bot.send_message(chat_id, "–ó –∫–∏–º –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–≤–µ—Å—Ç–∏ —Å—ñ–º'—é? (–ù–∞–ø–∏—à—ñ—Ç—å —ñ–º'—è –¥—Ä—É–≥–æ–≥–æ –∫–æ—Ç–∏–∫–∞)")
                        data.change_command(user_id, chat_id, "–û–¥—Ä—É–∂–µ–Ω–Ω—è")
                elif message.text == "–†–æ–∑–ª—É—á–∏—Ç–∏—Å—å":
                    if int(data.get_data(user_id, chat_id, 'married')) == 0:
                        await bot.send_message(chat_id, "–í–∏ –º–∞—î—Ç–µ —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–µ—Å—Ç–∏ —Å—ñ–º'—é")
                    elif int(data.get_data(user_id, chat_id, 'married')) == 2:
                        await bot.send_message(chat_id, "–í–∏ –≤–∂–µ —Ä–æ–∑–ª—É—á–µ–Ω—ñ")
                    else:
                        await bot.send_message(chat_id, f"–ß–∏ –¥—ñ–π—Å–Ω–æ –≤–∏ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑–ª—É—á–∏—Ç–∏—Å—å –∑ "
                                                        f"{data.get_data(data.get_data(user_id, chat_id, 'user2_id'), chat_id, 'name')}? (–¢–∞–∫/–ù—ñ)")
                        data.change_command(user_id, chat_id, "–†–æ–∑–ª—É—á–µ–Ω–Ω—è")
                elif message.text == "–ó–∞–≤–µ—Å—Ç–∏ –∫–æ—à–µ–Ω—è—Ç–æ–∫":
                    if int(data.get_data(user_id, chat_id, 'kittens')) != 0:
                        await bot.send_message(chat_id, "–í–∏ –≤–∂–µ –º–∞—î—Ç–µ –∫–æ—à–µ–Ω—è—Ç–æ–∫", reply_markup=KittensMenu)
                    elif int(data.get_data(user_id, chat_id, 'married')) != 1:
                        await bot.send_message(chat_id, "–í–∏ –º–∞—î—Ç–µ —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–µ—Å—Ç–∏ —Å—ñ–º'—é")
                    elif int(data.get_data(user_id, chat_id, 'under_level')) < 20:
                        await bot.send_message(chat_id, "–°–ø–æ—á–∞—Ç–∫—É –≤–∞—à –∫–æ—Ç–∏–∫ –º–∞—î –¥–æ—Å—è–≥–Ω—É—Ç–∏ 20 —Ä—ñ–≤–Ω—è!")
                    elif int(data.get_data(int(data.get_data(user_id, chat_id, 'user2_id')), chat_id, 'under_level')) < 20:
                        await bot.send_message(chat_id, "–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –º–∞—î –¥–æ—Å—è–≥–Ω—É—Ç–∏ 20 —Ä—ñ–≤–Ω—è!")
                    else:
                        await bot.send_message(chat_id, f"–ß–∏ –¥—ñ–π—Å–Ω–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–≤–µ—Å—Ç–∏ –∫–æ—à–µ–Ω—è—Ç–æ–∫ –∑ "
                                                        f"{data.get_data(user_id, chat_id, 'user2_name')}? (–¢–∞–∫/–ù—ñ)")
                        data.change_command(user_id, chat_id, "–ö–æ—à–µ–Ω—è—Ç–∫–∞")
                elif message.text in ["–ú–æ—ó –∫–æ—à–µ–Ω—è—Ç–∫–∞", f"{Bot_ID} –ú–æ—ó –∫–æ—à–µ–Ω—è—Ç–∫–∞"]:
                    if int(data.get_data(user_id, chat_id, 'kittens')) == 0:
                        await bot.send_message(chat_id, "–°–ø–æ—á–∞—Ç–∫—É –≤–∏ –º–∞—î—Ç–µ –∑–∞–≤–µ—Å—Ç–∏ –∫–æ—à–µ–Ω—è—Ç–æ–∫")
                    else:
                        photo = open(data.get_data(user_id, chat_id, 'kitten_photo'), 'rb')
                        await bot.send_photo(chat_id, photo, caption=data.get_data(user_id, chat_id, 'all3'))
        else:
            await bot.send_message(chat_id, "–¢–∏ –º–∞—î—à —Å–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ç–∞!", reply_markup=NewCat)
    else:
        await bot.send_message(chat_id, "–ù–∞—Ä–∞–∑—ñ –º–∞—Ç–∏ –∫–æ—Ç–∏–∫–∞ –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø—ñ! "
                                        "–î–æ–¥–∞–π –º–µ–Ω–µ —ñ –Ω–∞–¥–∞–π —É—Å—ñ –ø—Ä–∞–≤–∞!", reply_markup=AddGroup)


@dp.message_handler()
async def do(message: types.Message):
    user_id, chat_id = message.from_user.id, message.chat.id
    if message.chat.type in ['group', 'supergroup'] and data.user_exist(user_id, chat_id) == 1:
        command = data.get_data(user_id, chat_id, 'command')
        if command == "–ù–æ–≤–µ —ñ–º'—è":
            if data.get_data(user_id, chat_id, 'name') != '–í–∞—à –ö—ñ—Ç–∏–∫' and message.text == '–ù–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏':
                await bot.send_message(chat_id, "–Ü–º'—è –Ω–µ –∑–º—ñ–Ω–µ–Ω–æ")
                data.change_command(user_id, chat_id, '')
            elif len(message.text) > 50:
                await bot.send_message(chat_id, "–Ü–º'—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
            elif message.text == data.get_data(user_id, chat_id, 'name'):
                await bot.send_message(chat_id, "–í–∞—à –∫–æ—Ç–∏–∫ –≤–∂–µ –º–∞—î —Ü–µ —ñ–º'—è, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
            elif data.name_exist(message.text, chat_id) == 1:
                await bot.send_message(chat_id, "–Ü–º'—è –≤–∂–µ –∑–∞–π–Ω—è—Ç–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
            else:
                data.change_name_sets(user_id, chat_id, message.text)
                data.change_command(user_id, chat_id, '')
                await send_data1(user_id, chat_id)
        elif command == '–í–±–∏—Ç–∏ –∫–æ—Ç–∏–∫–∞':
            if message.text == 'T–∞–∫, —è —Ö–æ—á—É –≤–±–∏—Ç–∏ —Å–≤–æ–≥–æ –∫–æ—Ç–∏–∫–∞':
                data.kill(user_id, chat_id, 'kill')
                await bot.send_message(chat_id, "–ù–µ–ª—é–¥! –¢–∏ —Ç—ñ–ª—å–∫–∏ —â–æ –≤–±–∏–≤ –Ω–∞–π–º–∏–ª—ñ—à–µ —Å—Ç–≤–æ—Ä—ñ–Ω–Ω—è –Ω–∞ –∑–µ–º–ª—ñüò°")
            elif message.text == '–ù—ñ':
                data.kill(user_id, chat_id, 'wanted')
                await bot.send_message(chat_id, "–Ø–∫ –¥–æ–±—Ä–µ, —â–æ –≤–∏ –æ–¥—É–º–∞–ª–∏—Å—å, –∞–ª–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –≤—Å–µ –ø–∞–º'—è—Ç–∞—î!")
            data.change_command(user_id, chat_id, '')
        elif command == '–û–¥—Ä—É–∂–µ–Ω–Ω—è':
            if message.text == '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –≤–µ—Å—ñ–ª–ª—è':
                data.change_command(user_id, chat_id, '')
                await bot.send_message(chat_id, "–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –≤–µ—Å—ñ–ª–ª—è")
            elif data.name_exist(message.text, chat_id) == 1:
                user2_id = data.married_get_user2(message.text, chat_id)
                if message.text == data.get_data(user_id, chat_id, 'name'):
                    await bot.send_message(chat_id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ–¥—Ä—É–∂–∏—Ç–∏—Å—å —Å–∞–º—ñ –Ω–∞ —Å–æ–±—ñ")
                elif int(data.get_data(user2_id, chat_id, 'under_level')) < 15:
                    await bot.send_message(chat_id, "–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä —â–µ –º–∞—î –¥–æ—Å—è–≥–Ω—É—Ç–∏ 15 —Ä—ñ–≤–Ω—è!")
                elif int(data.get_data(user2_id, chat_id, 'married')) == 1:
                    await bot.send_message(chat_id, "–¶–µ–π –∫–æ—Ç–∏–∫ –≤–∂–µ —É —à–ª—é–±—ñ")
                else:
                    await bot.send_message(chat_id, f"{message.text}, –í–∏ –∑–≥–æ–¥–Ω—ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å—ñ–º'—é –∑ "
                                                    f"{data.get_data(user_id, chat_id, 'name')}? (–¢–∞–∫/–ù—ñ)")
                    data.change_command(user_id, chat_id, '–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è')
                    data.change_command(user2_id, chat_id, '–£–∑–≥–æ–¥–∂–µ–Ω–Ω—è –≤–µ—Å—ñ–ª–ª—è')
            else:
                await bot.send_message(chat_id, "–£ —Ü—å–æ–º—É —á–∞—Ç—ñ —Ç–∞–∫–æ–≥–æ –∫–æ—Ç–∏–∫–∞ –Ω–µ —ñ—Å–Ω—É—î, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
        elif command == '–†–æ–∑–ª—É—á–µ–Ω–Ω—è':
            if message.text == '–ù—ñ':
                data.change_command(user_id, chat_id, '')
                await bot.send_message(chat_id, "–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ —Ä–æ–∑–ª—É—á–µ–Ω–Ω—è!")
            elif message.text == '–¢–∞–∫':
                user1_name = data.get_data(user_id, chat_id, 'name')
                user2_id = data.get_data(user_id, chat_id, 'user2_id')
                user2_name = data.get_data(user_id, chat_id, 'family')
                await bot.send_message(chat_id, f"{user2_name}, –í–∏ –∑–≥–æ–¥–Ω—ñ —Ä–æ–∑–ª—É—á–∏—Ç–∏—Å—å –∑ "
                                                f"{user1_name}? (–¢–∞–∫/–ù—ñ)")
                data.change_command(user2_id, chat_id, '–£–∑–≥–æ–¥–∂–µ–Ω–Ω—è —Ä–æ–∑–ª—É—á–µ–Ω–Ω—è')
        elif command == '–ö–æ—à–µ–Ω—è—Ç–∫–∞':
            if message.text == '–ù—ñ':
                data.change_command(user_id, chat_id, '')
                await bot.send_message(chat_id, "–ö–æ—à–µ–Ω—è—Ç–∫–∞ –ø–æ—á–µ–∫–∞—é—Ç—å!")
            elif message.text == '–¢–∞–∫':
                user1_name = data.get_data(user_id, chat_id, 'name')
                user2_id = data.get_data(user_id, chat_id, 'user2_id')
                user2_name = data.get_data(user_id, chat_id, 'family')
                await bot.send_message(chat_id, f"{user2_name}, –í–∏ –∑–≥–æ–¥–Ω—ñ –∑–∞–≤–µ—Å—Ç–∏ –∫–æ—à–µ–Ω—è—Ç–æ–∫ –∑ "
                                                f"{user1_name}? (–¢–∞–∫/–ù—ñ)")
                data.change_command(user2_id, chat_id, '–£–∑–≥–æ–¥–∂–µ–Ω–Ω—è –∫–æ—à–µ–Ω—è—Ç–æ–∫')
        elif command == '–£–∑–≥–æ–¥–∂–µ–Ω–Ω—è –≤–µ—Å—ñ–ª–ª—è':
            user1_name = data.get_data(user_id, chat_id, 'name')
            user2_id = data.married_get_data(chat_id, '–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è', 'user_id')
            user2_name = data.married_get_data(chat_id, '–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è', 'name')
            if message.text == '–¢–∞–∫':
                data.married_set_users(chat_id, user_id, user2_id)
                data.married_set_users(chat_id, user2_id, user_id)
                data.change_command(user_id, chat_id, '')
                data.change_command(user2_id, chat_id, '')
                await bot.send_message(chat_id, f"{user1_name} —Ç–µ–ø–µ—Ä –æ—Ñ—ñ—Ü—ñ–π–Ω–æ —É —à–ª—é–±—ñ –∑ {user2_name}")
            elif message.text == '–ù—ñ':
                data.change_command(user_id, chat_id, '')
                data.change_command(user2_id, chat_id, '')
                await bot.send_message(chat_id, f"{user2_name}, –Ω–∞ –∂–∞–ª—å {user1_name} –≤—ñ–¥–º–æ–≤–∏–≤(-–ª–∞) –≤–∞–º")
        elif command == '–£–∑–≥–æ–¥–∂–µ–Ω–Ω—è —Ä–æ–∑–ª—É—á–µ–Ω–Ω—è':
            user1_name = data.get_data(user_id, chat_id, 'name')
            user2_id = data.get_data(user_id, chat_id, 'user2_id')
            user2_name = data.get_data(user_id, chat_id, 'family')
            if message.text == '–¢–∞–∫':
                data.married_break(chat_id, user_id)
                data.married_break(chat_id, user2_id)
                data.change_command(user_id, chat_id, '')
                data.change_command(user2_id, chat_id, '')
                await bot.send_message(chat_id, f"{user1_name} —ñ {user2_name} –±—ñ–ª—å—à–µ –Ω–µ —É —à–ª—é–±—ñ")
            elif message.text == '–ù—ñ':
                data.change_command(user_id, chat_id, '')
                data.change_command(user2_id, chat_id, '')
                await bot.send_message(chat_id, f"{user1_name}, –Ω–∞ –∂–∞–ª—å {user2_name} –≤—ñ–¥–º–æ–≤–∏–≤(-–ª–∞) –≤–∞–º")
        elif command == '–£–∑–≥–æ–¥–∂–µ–Ω–Ω—è –∫–æ—à–µ–Ω—è—Ç–æ–∫':
            user1_name = data.get_data(user_id, chat_id, 'name')
            user2_id = data.get_data(user_id, chat_id, 'user2_id')
            user2_name = data.get_data(user_id, chat_id, 'family')
            if message.text == '–¢–∞–∫':
                data.kittens(chat_id, user_id, user2_id)
                data.change_command(user_id, chat_id, '')
                data.change_command(user2_id, chat_id, '')
                await bot.send_message(chat_id, f"{user1_name} —ñ {user2_name} —Ç–µ–ø–µ—Ä –º–∞—é—Ç—å –º–∏–ª–∏—Ö –∫–æ—à–µ–Ω—è—Ç!",
                                       reply_markup=KittensMenu)
            elif message.text == '–ù—ñ':
                data.change_command(user_id, chat_id, '')
                data.change_command(user2_id, chat_id, '')
                await bot.send_message(chat_id, f"{user1_name}, –Ω–∞ –∂–∞–ª—å {user2_name} –≤—ñ–¥–º–æ–≤–∏–≤(-–ª–∞) –≤–∞–º")


@dp.callback_query_handler(text_contains='job')
async def job(call: types.CallbackQuery):
    classes = ['–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫', '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫', '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫', '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫', '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω']
    jobs = {'–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫': ['–ë—ñ–∑–Ω–µ—Å–º–µ–Ω', '–ë–∞–Ω–∫—ñ—Ä', '–û—Ñ—ñ—Ü—ñ–∞–Ω—Ç', '–ë—É–¥—ñ–≤–µ–ª—å–Ω–∏–∫'],
            '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫': ['–ë—ñ–∑–Ω–µ—Å–º–µ–Ω', '–û—Ñ—ñ—Ü—ñ–∞–Ω—Ç', '–ü—Å–∏—Ö–æ–ª–æ–≥', '–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç'],
            '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫': ['–ë–∞–Ω–∫—ñ—Ä', '–í—á–µ–Ω–∏–π', '–ú–µ–Ω–µ–¥–∂–µ—Ä', '–ö—É—Ö–∞—Ä'],
            '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫': ['–ë—ñ–∑–Ω–µ—Å–º–µ–Ω', '–ë—É–¥—ñ–≤–µ–ª—å–Ω–∏–∫', '–í—ñ–π—Å—å–∫–æ–≤–∏–π', '–®–ø–∏–≥—É–Ω', '–õ—å–æ—Ç—á–∏–∫'],
            '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω': ['–û—Ñ—ñ—Ü—ñ–∞–Ω—Ç', '–í—á–µ–Ω–∏–π', '–°–æ–º—ñ–ª—å—î', '–Ü–Ω–≤–µ—Å—Ç–æ—Ä', '–ñ—É—Ä–Ω–∞–ª—ñ—Å—Ç']}
    extra_job = ['–ë–∞–Ω–∫—ñ—Ä', '–®–ø–∏–≥—É–Ω', '–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç', '–ú–µ–Ω–µ–¥–∂–µ—Ä', '–Ü–Ω–≤–µ—Å—Ç–æ—Ä', '–ö–æ—Å–º–æ–Ω–∞–≤—Ç']
    a = data.get_data(call.from_user.id, call.message.chat.id, 'class')
    if data.get_data(call.from_user.id, call.message.chat.id, 'level') != '–ö–æ—à–µ–Ω—è—Ç–∫–æ' and \
            (data.get_data(call.from_user.id, call.message.chat.id, 'job') == '–ù–µ–º–∞' or
             int(data.get_data(call.from_user.id, call.message.chat.id, 'job_changes')) > 0) and \
            ((a in classes and call.data[4:] in jobs[a]) or (a not in classes and call.data[4:] in extra_job)):
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        data.change_job(call.from_user.id, call.message.chat.id, call.data[4:])
        data.change_job_changes(call.from_user.id, call.message.chat.id, '-')
        await bot.send_message(call.message.chat.id, f"–í–∏ –æ–±—Ä–∞–ª–∏ –ø—Ä–æ—Ñ–µ—Å—ñ—é - {call.data[4:]}. "
                                                     f"–¢–µ–ø–µ—Ä –≤–∞—à –∫–æ—Ç–∏–∫ –∑–º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏!")


async def allways():
    while True:
        await asyncio.sleep(3600)
        data.change_all_feed()
        data.change_all_wanna_play()
        data.change_all_hungry()
        data.change_all_working()
        await asyncio.sleep(3600)
        data.change_all_hungry()
        data.change_all_working()
        data.not_doing()

if __name__ == '__main__':
    data.init_db()
    asyncio.gather(allways())
    executor.start_polling(dp, skip_updates=True)
