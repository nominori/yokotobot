import time

from aiogram import Bot, Dispatcher, executor, types
import asyncio
import logging
from config import *
from Buttons import *
from database import Database

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
data = Database()

text = {'/start': "–©–æ–± –Ω–∞—Ä–µ—à—Ç—ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤–æ–≥–æ –∫–æ—Ç–∏–∫–∞, –¥–æ–¥–∞–π –º–µ–Ω–µ –≤ –≥—Ä—É–ø—É –∑ –¥—Ä—É–∑—è–º–∏ —ñ –Ω–∞–¥–∞–π —É—Å—ñ –ø—Ä–∞–≤–∞!",
        '/help': "<a href = 'https://telegra.ph/Kotobot-Manual-08-03'>–ì–∞–π–¥ –ø–æ –ö–æ—Ç–æ–±–æ—Ç—É</a>\n\n"
                 "<a href = 'https://telegra.ph/Spisok-komand-08-09'>–£—Å—ñ –∫–æ–º–∞–Ω–¥–∏</a>\n"}
rz = {0: '—Ä–∞–∑—ñ–≤', 1: '—Ä–∞–∑', 2: '—Ä–∞–∑–∞', 3: '—Ä–∞–∑–∏', 4: '—Ä–∞–∑–∏', 5: '—Ä–∞–∑—ñ–≤',
      6: '—Ä–∞–∑—ñ–≤', 7: '—Ä–∞–∑—ñ–≤', 8: '—Ä–∞–∑—ñ–≤', 9: '—Ä–∞–∑—ñ–≤', 10: '—Ä–∞–∑—ñ–≤'}
jobs_choice = {'–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫': CatJobs, '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫': CatJobs1,
               '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫': CatJobs2, '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫': CatJobs3, '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω': CatJobs4}
classes = ['–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫', '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫', '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫', '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫', '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω']
jobs = {'–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫': ['–ë—ñ–∑–Ω–µ—Å–º–µ–Ω', '–ë–∞–Ω–∫—ñ—Ä', '–û—Ñ—ñ—Ü—ñ–∞–Ω—Ç', '–ë—É–¥—ñ–≤–µ–ª—å–Ω–∏–∫'],
        '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫': ['–ë—ñ–∑–Ω–µ—Å–º–µ–Ω', '–û—Ñ—ñ—Ü—ñ–∞–Ω—Ç', '–ü—Å–∏—Ö–æ–ª–æ–≥', '–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç'],
        '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫': ['–ë–∞–Ω–∫—ñ—Ä', '–í—á–µ–Ω–∏–π', '–ú–µ–Ω–µ–¥–∂–µ—Ä', '–ö—É—Ö–∞—Ä'],
        '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫': ['–ë—ñ–∑–Ω–µ—Å–º–µ–Ω', '–ë—É–¥—ñ–≤–µ–ª—å–Ω–∏–∫', '–í—ñ–π—Å—å–∫–æ–≤–∏–π', '–®–ø–∏–≥—É–Ω', '–õ—å–æ—Ç—á–∏–∫'],
        '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω': ['–û—Ñ—ñ—Ü—ñ–∞–Ω—Ç', '–í—á–µ–Ω–∏–π', '–°–æ–º—ñ–ª—å—î', '–Ü–Ω–≤–µ—Å—Ç–æ—Ä', '–ñ—É—Ä–Ω–∞–ª—ñ—Å—Ç']}
extra_jobs = ['–ë–∞–Ω–∫—ñ—Ä', '–®–ø–∏–≥—É–Ω', '–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç', '–ú–µ–Ω–µ–¥–∂–µ—Ä', '–Ü–Ω–≤–µ—Å—Ç–æ—Ä', '–ö–æ—Å–º–æ–Ω–∞–≤—Ç']


async def send_cat_data(user_id, chat_id):
    cat_data = InlineKeyboardMarkup().add(cat_buttons[3])
    if data.get_data(user_id, chat_id, 'user_data', 'under_level') >= 5:
        cat_data = InlineKeyboardMarkup(row_width=2).add(cat_buttons[3], cat_buttons[4])
    photo = open("photos/" + data.get_data(user_id, chat_id, 'user_data', 'photo'), 'rb')
    await bot.send_photo(chat_id, photo, caption=data.get_all_data(user_id, chat_id, 'user_data', 'cat_data'),
                         reply_markup=cat_data)


async def send_cat_info(user_id, chat_id):
    action_cat = InlineKeyboardMarkup()
    buttons_list = []
    if data.get_data(user_id, chat_id, 'user_data', 'feed_limit') > 0:
        buttons_list.append(cat_buttons[5])
    if data.get_data(user_id, chat_id, 'user_data', 'wanna_play') == '–¢–∞–∫':
        buttons_list.append(cat_buttons[6])
    if len(buttons_list) == 1:
        action_cat = InlineKeyboardMarkup().add(buttons_list[0])
    elif len(buttons_list) == 2:
        action_cat = InlineKeyboardMarkup(row_width=2).add(buttons_list[0], buttons_list[1])
    await bot.send_message(chat_id, data.get_all_data(user_id, chat_id, 'user_data', 'cat_info'), reply_markup=action_cat)


async def send_cat_job(user_id, chat_id):
    action_cat = InlineKeyboardMarkup()
    buttons_list = []
    if data.get_data(user_id, chat_id, 'job_data', 'job') == '–ù–µ–º–∞':
        buttons_list.append(cat_buttons[7])
    elif data.get_data(user_id, chat_id, 'job_data', 'job_status') == '–ù–µ –ø—Ä–∞—Ü—é—î':
        buttons_list.append(cat_buttons[8])
    if data.get_data(user_id, chat_id, 'job_data', 'job_hours') >= 100 * (data.get_data(user_id, chat_id, 'job_data', 'vacation') + 1) and \
            data.get_data(user_id, chat_id, 'job_data', 'job_status') not in ['–£ –≤—ñ–¥–ø—É—Å—Ç—Ü—ñ', '–ù–∞ –ø–µ–Ω—Å—ñ—ó', '–ù–∞ —Ä–æ–±–æ—Ç—ñ']:
        buttons_list.append(cat_buttons[9])
    if data.get_data(user_id, chat_id, 'job_data', 'job_changes') > 0 and \
            data.get_data(user_id, chat_id, 'job_data', 'job_status') not in ['–£ –≤—ñ–¥–ø—É—Å—Ç—Ü—ñ', '–ù–∞ –ø–µ–Ω—Å—ñ—ó', '–ù–∞ —Ä–æ–±–æ—Ç—ñ']:
        buttons_list.append(cat_buttons[10])
    if data.get_data(user_id, chat_id, 'job_data', 'job_status') == '–ù–µ –ø—Ä–∞—Ü—é—î' and \
            data.get_data(user_id, chat_id, 'user_data', 'under_level') >= 40 and data.get_data(user_id, chat_id, 'job_data', 'job_hours') >= 500:
        buttons_list.append(cat_buttons[11])
    if len(buttons_list) == 1:
        action_cat = InlineKeyboardMarkup().add(buttons_list[0])
    elif len(buttons_list) == 2:
        action_cat = InlineKeyboardMarkup(row_width=2).add(buttons_list[0], buttons_list[1])
    elif len(buttons_list) == 3:
        action_cat = InlineKeyboardMarkup(row_width=2).add(buttons_list[0], buttons_list[1], buttons_list[2])
    elif len(buttons_list) == 4:
        action_cat = InlineKeyboardMarkup(row_width=2).add(buttons_list[0], buttons_list[1], buttons_list[2], buttons_list[3])
    await bot.send_message(chat_id, data.get_all_data(user_id, chat_id, 'job_data', 'job_data'),
                           reply_markup=action_cat)


@dp.message_handler(commands=['start', 'help'])
async def start(message: types.Message):
    photo = open("photos/main.PNG", 'rb')
    message.text = message.text.replace(f'{Bot_ID}', '')
    if message.text == '/start' and message.chat.type == 'private':
        await bot.send_message(message.chat.id, text[message.text], reply_markup=AddGroup, parse_mode='HTML')
    elif message.text == '/help':
        await bot.send_photo(message.chat.id, photo, caption=text[message.text], parse_mode='HTML')


@dp.message_handler(text=['–•–æ—á—É –∫–æ—Ç–∏–∫–∞', f'{Bot_ID} –•–æ—á—É –∫–æ—Ç–∏–∫–∞'])
async def new_cat(message: types.Message):
    message.text = message.text.replace(f'{Bot_ID} ', '')
    user_id, chat_id = message.from_user.id, message.chat.id
    if message.chat.type in ['group', 'supergroup']:
        if data.user_exist(user_id, chat_id) == 1:
            kill_ever = data.get_data(user_id, chat_id, 'user_data', 'kill_ever')
            if kill_ever == 2:
                await bot.send_message(chat_id, "–í–±–∏–≤—Ü—è–º –Ω–µ –¥–∞–≤–∞–ª–∏ —Å–ª–æ–≤–∞üò°")
            else:
                await bot.send_message(chat_id, "–¢–∏ –≤–∂–µ –º–∞—î—à –∫—ñ—Ç–∏–∫–∞!", reply_markup=MyCat)
        else:
            await data.add_user(user_id, chat_id)
            photo = open("photos/" + data.get_data(user_id, chat_id, 'user_data', 'photo'), 'rb')
            await bot.send_photo(chat_id, photo, caption=f"–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –Ω–æ–≤–æ–≥–æ –∫—ñ—Ç–∏–∫–∞üéÅ")
            await bot.send_message(chat_id, f"–ù–∞–ø–∏—à–∏ —ñ–º'—è –≤–∞—à–æ–≥–æ –∫–æ—Ç–∏–∫–∞")
            await data.change_command(user_id, chat_id, "–ù–æ–≤–µ —ñ–º'—è")
    else:
        await bot.send_message(chat_id, "–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ç–∏–∫–∞ –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø—ñ! –î–æ–¥–∞–π –º–µ–Ω–µ —ñ –Ω–∞–¥–∞–π —É—Å—ñ –ø—Ä–∞–≤–∞!",
                               reply_markup=AddGroup)


@dp.message_handler(text=['–ú—ñ–π –∫–æ—Ç–∏–∫', f'{Bot_ID} –ú—ñ–π –∫–æ—Ç–∏–∫'])
async def my_cat(message: types.Message):
    if message.chat.type in ['group', 'supergroup']:
        user_id, chat_id = message.from_user.id, message.chat.id
        if data.user_exist(user_id, chat_id) == 1:
            if message.text == '–ú—ñ–π –∫–æ—Ç–∏–∫':
                await send_cat_data(user_id, chat_id)
        else:
            await bot.send_message(chat_id, "–¢–∏ –º–∞—î—à —Å–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ç–∞!", reply_markup=NewCat)


@dp.message_handler(text=['–í–æ—Å–∫—Ä–µ—Å–∏—Ç–∏ –º–æ–≥–æ –∫–æ—Ç–∏–∫–∞'])
async def reborn(message: types.Message):
    if message.chat.type in ['group', 'supergroup']:
        user_id, chat_id = message.from_user.id, message.chat.id
        if data.user_exist(user_id, chat_id) == 1:
            kill_ever = data.get_data(user_id, chat_id, 'user_data', 'kill_ever')
            if kill_ever == 2:
                await bot.send_message(chat_id, "–í–±–∏–≤—Ü—è–º –Ω–µ –¥–∞–≤–∞–ª–∏ —Å–ª–æ–≤–∞üò°")
            elif kill_ever == 3:
                alive = data.get_data(user_id, chat_id, 'user_data', 'alive')
                if alive == 0:
                    await data.reborn(user_id, chat_id)
                    await bot.send_message(chat_id, "–í–∞—à –∫–æ—Ç–∏–∫ –±—É–¥–µ –∂–∏—Ç–∏, –∞–ª–µ –Ω–µ –∑–∞–±—É–≤–∞–π—Ç–µ –π–æ–≥–æ –¥–æ–≥–ª—è–¥–∞—Ç–∏, "
                                                    "–±–æ –±—ñ–ª—å—à–µ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤–æ—Å–∫—Ä–µ—Å–∏—Ç–∏ —É –≤–∞—Å –Ω–µ –±—É–¥–µ")
                else:
                    await bot.send_message(chat_id, "–ù–∞ –∂–∞–ª—å, –≤–∞—à–æ–≥–æ –∫–æ—Ç–∏–∫–∞ –±—ñ–ª—å—à–µ –Ω–µ –º–æ–∂–Ω–∞ –≤–æ—Å–∫—Ä–µ—Å–∏—Ç–∏")
            else:
                await bot.send_message(chat_id, "–í–∞—à –∫–æ—Ç–∏–∫ –∂–∏–≤–∏–π, –π–æ–≥–æ –Ω–µ —Ç—Ä–µ–±–∞ –≤–æ—Å–∫—Ä–µ—à–∞—Ç–∏")


@dp.message_handler(text=['–ö–æ—Ç–∏–∫ —ñ–Ω—Ñ–æ', f'{Bot_ID} –ö–æ—Ç–∏–∫ —ñ–Ω—Ñ–æ', "–ú—ñ–π –±–∞–ª–∞–Ω—Å", f"{Bot_ID} –ú—ñ–π –±–∞–ª–∞–Ω—Å",
                          '–ù–∞–≥–æ–¥—É–≤–∞—Ç–∏', f'{Bot_ID} –ù–∞–≥–æ–¥—É–≤–∞—Ç–∏', '–ü–æ–≥—Ä–∞—Ç–∏—Å—å', f'{Bot_ID} –ü–æ–≥—Ä–∞—Ç–∏—Å—å', "–†–æ–∑–ª—É—á–∏—Ç–∏—Å—å",
                          "–ó–∞–≤–µ—Å—Ç–∏ –∫–æ—à–µ–Ω—è—Ç–æ–∫", "–ú–æ—ó –∫–æ—à–µ–Ω—è—Ç–∫–∞", f"{Bot_ID} –ú–æ—ó –∫–æ—à–µ–Ω—è—Ç–∫–∞", "–ú–∞–≥–∞–∑–∏–Ω",
                          "–ö—É–ø–∏—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É", f"{Bot_ID} –ö—É–ø–∏—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É", "–ú–æ—è –∫–≤–∞—Ä—Ç–∏—Ä–∞", f"{Bot_ID} –ú–æ—è –∫–≤–∞—Ä—Ç–∏—Ä–∞",
                          "–ü–µ—Ä–µ—ó—Ö–∞—Ç–∏ –¥–æ —Å–µ–±–µ", "–í–∏—ó—Ö–∞—Ç–∏ –∑ –∫–≤–∞—Ä—Ç–∏—Ä–∏", '–í–±–∏—Ç–∏ –∫–æ—Ç–∏–∫–∞'])
async def commands(message: types.Message):
    if message.chat.type in ['group', 'supergroup']:
        user_id, chat_id = message.from_user.id, message.chat.id
        if data.user_exist(user_id, chat_id) == 1:
            kill_ever = data.get_data(user_id, chat_id, 'user_data', 'kill_ever')
            if kill_ever == 2:
                await bot.send_message(chat_id, "–í–±–∏–≤—Ü—è–º –Ω–µ –¥–∞–≤–∞–ª–∏ —Å–ª–æ–≤–∞üò°")
            elif kill_ever == 3:
                await bot.send_message(chat_id, "–ù–∞ –∂–∞–ª—å, –≤–∞—à –∫–æ—Ç–∏–∫ –≤–º–µ—Ä –∑ –≥–æ–ª–æ–¥—É, —è–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–æ—Å–∫—Ä–µ—Å–∏—Ç–∏ "
                                                "–π–æ–≥–æ –Ω–∞–ø–∏—à—ñ—Ç—å <u><i><b>–í–æ—Å–∫—Ä–µ—Å–∏—Ç–∏ –º–æ–≥–æ –∫–æ—Ç–∏–∫–∞</b></i></u>",
                                       parse_mode='HTML')
            else:
                message.text = message.text.replace(f'{Bot_ID} ', '')
                user_name = data.get_data(user_id, chat_id, 'user_data', 'name')
                if message.text == '–ö–æ—Ç–∏–∫ —ñ–Ω—Ñ–æ':
                    await send_cat_info(user_id, chat_id)
                elif message.text == "–ú—ñ–π –±–∞–ª–∞–Ω—Å":
                    await bot.send_message(chat_id, data.get_data(user_id, chat_id, 'user_data', 'cat_money'))
                elif message.text == "–ú–æ—ó –∫–æ—à–µ–Ω—è—Ç–∫–∞":
                    if data.kittens_exist(user_id, chat_id) == 0:
                        await bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –∫–æ—à–µ–Ω—è—Ç–æ–∫")
                    else:
                        photo = open("photos/" + data.get_data(user_id, chat_id, 'kittens_data', 'photo'), 'rb')
                        await bot.send_photo(chat_id, photo, caption=data.get_all_data(user_id, chat_id, 'kittens_data', 'kitten_data'))
                elif message.text == "–ú–∞–≥–∞–∑–∏–Ω":
                    await bot.send_message(chat_id, "–ö–≤–∞—Ä—Ç–∏—Ä–∞ - 100 –º–æ–Ω–µ—Ç\n")
                elif message.text == '–í–±–∏—Ç–∏ –∫–æ—Ç–∏–∫–∞':
                    await data.change_command(user_id, chat_id, '–í–±–∏—Ç–∏ –∫–æ—Ç–∏–∫–∞')
                    await bot.send_message(chat_id, "–í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏? (–Ω–∞–ø–∏—à—ñ—Ç—å '–ù—ñ' –∞–±–æ "
                                                    "'T–∞–∫, —è —Ö–æ—á—É –≤–±–∏—Ç–∏ —Å–≤–æ–≥–æ –∫–æ—Ç–∏–∫–∞' —è–∫—â–æ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ)")
                elif message.text == '–ù–∞–≥–æ–¥—É–≤–∞—Ç–∏':
                    feed_limit = data.get_data(user_id, chat_id, 'user_data', 'feed_limit')
                    if feed_limit == 0:
                        await bot.send_message(chat_id, f"–í–∏ –ø–æ–≥–æ–¥—É–≤–∞–ª–∏ –∫–æ—Ç–∏–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞–∑—ñ–≤")
                    else:
                        under_level = data.get_data(user_id, chat_id, 'user_data', 'under_level')
                        level = data.get_data(user_id, chat_id, 'user_data', 'level')
                        await data.change_hungry(user_id, chat_id, feed_limit)
                        under_level_after = data.get_data(user_id, chat_id, 'user_data', 'under_level')
                        level_after = data.get_data(user_id, chat_id, 'user_data', 'level')
                        await bot.send_message(chat_id, f"–ú–æ–∂–Ω–∞ –Ω–∞–≥–æ–¥—É–≤–∞—Ç–∏ –∫–æ—Ç–∏–∫–∞ {feed_limit} {rz[feed_limit]})")
                        if level != level_after:
                            await bot.send_message(chat_id, "–°—Ç–∞—Ç—É—Å —ñ —Ä—ñ–≤–µ–Ω—å –ø—ñ–¥–≤–∏—â–µ–Ω–Ω–æ!")
                        elif under_level < under_level_after:
                            await bot.send_message(chat_id, "–†—ñ–≤–µ–Ω—å –ø—ñ–¥–≤–∏—â–µ–Ω–Ω–æ!")
                elif message.text == '–ü–æ–≥—Ä–∞—Ç–∏—Å—å':
                    wanna_play = data.get_data(user_id, chat_id, 'user_data', 'wanna_play')
                    if wanna_play == '–ù—ñ':
                        await bot.send_message(chat_id, f"{user_name} –Ω–µ —Ö–æ—á–µ –≥—Ä–∞—Ç–∏—Å—è")
                    else:
                        await data.change_wanna_play(user_id, chat_id)
                        await bot.send_message(chat_id, f"{user_name} –≥—Ä–∞—î—Ç—å—Å—è")
                elif message.text == "–†–æ–∑–ª—É—á–∏—Ç–∏—Å—å":
                    married = data.get_data(user_id, chat_id, 'user_data', 'married')
                    if married == 0:
                        await bot.send_message(chat_id, "–í–∏ –º–∞—î —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–µ—Å—Ç–∏ —Å—ñ–º'—é")
                    elif married == 2:
                        await bot.send_message(chat_id, "–í–∏ –≤–∂–µ –≤ —Ä–æ–∑–ª—É—á–µ–Ω–Ω—ñ")
                    else:
                        user2_id = data.get_data(user_id, chat_id, 'user_data', 'user2_id')
                        user2_name = data.get_data(user2_id, chat_id, 'user_data', 'name')
                        await bot.send_message(chat_id, f"–ß–∏ –¥—ñ–π—Å–Ω–æ –≤–∏ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑–ª—É—á–∏—Ç–∏—Å—å –∑ {user2_name}? (–¢–∞–∫/–ù—ñ)")
                        await data.change_command(user_id, chat_id, "–†–æ–∑–ª—É—á–µ–Ω–Ω—è")
                elif message.text == "–ö—É–ø–∏—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É":
                    if data.apartment_exist(user_id, chat_id) == 1:
                        await bot.send_message(chat_id, "–í–∏ –≤–∂–µ –º–∞—î—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É!", reply_markup=ApartmentData)
                    elif data.get_data(user_id, chat_id, 'user_data', 'money') < 100:
                        await bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≥—Ä–æ—à–µ–π", reply_markup=MoneyData)
                    else:
                        await data.buy_apartment(user_id, chat_id)
                        await bot.send_message(chat_id, "–í–∏ –∫—É–ø–∏–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É", reply_markup=ApartmentData)
                elif message.text == "–ú–æ—è –∫–≤–∞—Ä—Ç–∏—Ä–∞":
                    if data.apartment_exist(user_id, chat_id) == 0 and data.user_in_all_apartments_exist(user_id, chat_id) == 0:
                        await bot.send_message(chat_id, "–í–∏ –Ω–µ –º–∞—î—Ç–µ —ñ –Ω–µ –∂–∏–≤–µ—Ç–µ —É –∫–≤–∞—Ä—Ç–∏—Ä—ñ!")
                    elif data.apartment_exist(user_id, chat_id) == 1:
                        photo = open("photos/" + data.get_data(user_id, chat_id, 'apartment_data', 'photo'), 'rb')
                        await bot.send_photo(chat_id, photo, caption=data.get_all_data(user_id, chat_id, 'apartment_data', 'apartment_data'))
                    elif data.user_in_all_apartments_exist(user_id, chat_id) != 0:
                        user_id_ = data.user_in_all_apartments_exist(user_id, chat_id)
                        photo = open("photos/" + data.get_data(user_id_, chat_id, 'apartment_data', 'photo'), 'rb')
                        await bot.send_photo(chat_id, photo, caption=data.get_all_data(user_id_, chat_id, 'apartment_data', 'apartment_data'))
                elif message.text == "–ü–µ—Ä–µ—ó—Ö–∞—Ç–∏ –¥–æ —Å–µ–±–µ":
                    if data.apartment_exist(user_id, chat_id) == 0:
                        await bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –∫–≤–∞—Ä—Ç–∏—Ä–∏")
                    elif data.get_data(user_id, chat_id, 'apartment_data', 'user1_id') != 0 and \
                            data.get_data(user_id, chat_id, 'apartment_data', 'user2_id') != 0 and \
                            data.get_data(user_id, chat_id, 'apartment_data', 'user3_id') != 0 and \
                            data.get_data(user_id, chat_id, 'apartment_data', 'user4_id') != 0 and \
                            data.get_data(user_id, chat_id, 'apartment_data', 'user5_id') != 0:
                        await bot.send_message(chat_id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—ó—Ö–∞—Ç–∏ –±–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞ –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–∞")
                    else:
                        for j in range(5):
                            if data.get_data(user_id, chat_id, 'apartment_data', f'user{j + 1}_id') == user_id:
                                await bot.send_message(chat_id, f"–í–∏ –≤–∂–µ –∂–∏–≤–µ—Ç–µ —É —Å–≤–æ—ó–π –∫–≤–∞—Ä—Ç–∏—Ä—ñ")
                                break
                        else:
                            await data.change_apartment(user_id, chat_id, user_id)
                            await bot.send_message(chat_id, "–í–∏ –ø–µ—Ä–µ—ó—Ö–∞–ª–∏ –¥–æ —Å–µ–±–µ")
                elif message.text == "–í–∏—ó—Ö–∞—Ç–∏ –∑ –∫–≤–∞—Ä—Ç–∏—Ä–∏":
                    owner = data.user_in_all_apartments_exist(user_id, chat_id)
                    if owner == 0:
                        await bot.send_message(chat_id, "–í–∏ –Ω–µ –∂–∏–≤–µ—Ç–µ —É –∫–≤–∞—Ä—Ç–∏—Ä—ñ!")
                    else:
                        await data.remove_from_apartment(owner, chat_id, user_id)
                        await bot.send_message(chat_id, f"–í–∏ –±—ñ–ª—å—à–µ –Ω–µ –∂–∏–≤–µ—Ç–µ —É –∫–≤–∞—Ä—Ç–∏—Ä—ñ!")
                elif message.text == "–ó–∞–≤–µ—Å—Ç–∏ –∫–æ—à–µ–Ω—è—Ç–æ–∫":
                    user2_id = data.get_data(user_id, chat_id, 'user_data', 'user2_id')
                    user2_name = data.get_data(user2_id, chat_id, 'user_data', 'name')
                    if data.kittens_exist(user_id, chat_id) == 1:
                        await bot.send_message(chat_id, f"–í–∏ –≤–∂–µ –º–∞—î—Ç–µ –∫–æ—à–µ–Ω—è—Ç–æ–∫", reply_markup=KittensData)
                    elif data.get_data(user_id, chat_id, 'user_data', 'married') != 1:
                        await bot.send_message(chat_id, f"–í–∏ –º–∞—î—Ç–µ —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–µ—Å—Ç–∏ —Å—ñ–º'—é")
                    elif data.get_data(user_id, chat_id, 'user_data', 'under_level') < 15:
                        await bot.send_message(chat_id, f"–°–ø–æ—á–∞—Ç–∫—É –≤–∏ –º–∞—î—Ç–µ –¥–æ—Å—è–≥–Ω—É—Ç–∏ 20 —Ä—ñ–≤–Ω—è!")
                    elif data.kittens_exist(user2_id, chat_id) == 1:
                        await bot.send_message(chat_id, f"{user2_name} –≤–∂–µ –º–∞—î –∫–æ—à–µ–Ω—è—Ç–æ–∫!")
                    elif data.get_data(user2_id, chat_id, 'user_data', 'under_level') < 15:
                        await bot.send_message(chat_id, f"{user2_name} –º–∞—î –¥–æ—Å—è–≥–Ω—É—Ç–∏ 20 —Ä—ñ–≤–Ω—è!")
                    else:
                        await bot.send_message(chat_id, f"{user2_name}, –≤–∏ –∑–≥–æ–¥–Ω—ñ –∑–∞–≤–µ—Å—Ç–∏ –∫–æ—à–µ–Ω—è—Ç–æ–∫ –∑ {user_name}? (–¢–∞–∫/–ù—ñ)")
                        await data.change_command(user2_id, chat_id, '–£–∑–≥–æ–¥–∂–µ–Ω–Ω—è –∫–æ—à–µ–Ω—è—Ç–æ–∫')
        else:
            await bot.send_message(chat_id, "–¢–∏ –º–∞—î—à —Å–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ç–∞!", reply_markup=NewCat)


@dp.message_handler(text=['–†–æ–±–æ—Ç–∞ –∫–æ—Ç–∏–∫–∞', f"{Bot_ID} –†–æ–±–æ—Ç–∞ –∫–æ—Ç–∏–∫–∞",
                          '–û–±—Ä–∞—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ—é', f'{Bot_ID} –û–±—Ä–∞—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ—é',
                          '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏', f'{Bot_ID} –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏',
                          '–ü–æ—ó—Ö–∞—Ç–∏ —É –≤—ñ–¥–ø—É—Å—Ç–∫—É', f'{Bot_ID} –ü–æ—ó—Ö–∞—Ç–∏ —É –≤—ñ–¥–ø—É—Å—Ç–∫—É',
                          '–ü—ñ—Ç–∏ –Ω–∞ –ø–µ–Ω—Å—ñ—é', f'{Bot_ID} –ü—ñ—Ç–∏ –Ω–∞ –ø–µ–Ω—Å—ñ—é',
                          '–ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ—é', f'{Bot_ID} –ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ—é'])
async def job_commands(message: types.Message):
    if message.chat.type in ['group', 'supergroup']:
        user_id, chat_id = message.from_user.id, message.chat.id
        if data.user_exist(user_id, chat_id) == 1:
            kill_ever = data.get_data(user_id, chat_id, 'user_data', 'kill_ever')
            if kill_ever == 2:
                await bot.send_message(chat_id, "–í–±–∏–≤—Ü—è–º –Ω–µ –¥–∞–≤–∞–ª–∏ —Å–ª–æ–≤–∞üò°")
            elif kill_ever == 3:
                await bot.send_message(chat_id, "–ù–∞ –∂–∞–ª—å, –≤–∞—à –∫–æ—Ç–∏–∫ –≤–º–µ—Ä –∑ –≥–æ–ª–æ–¥—É, —è–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–æ—Å–∫—Ä–µ—Å–∏—Ç–∏ "
                                                "–π–æ–≥–æ –Ω–∞–ø–∏—à—ñ—Ç—å <u><i><b>–í–æ—Å–∫—Ä–µ—Å–∏—Ç–∏ –º–æ–≥–æ –∫–æ—Ç–∏–∫–∞</b></i></u>",
                                       parse_mode='HTML')
            else:
                message.text = message.text.replace(f'{Bot_ID} ', '')
                user_name = data.get_data(user_id, chat_id, 'user_data', 'name')
                job = data.get_data(user_id, chat_id, 'job_data', 'job')
                job_status = data.get_data(user_id, chat_id, 'job_data', 'job_status')
                if message.text == '–†–æ–±–æ—Ç–∞ –∫–æ—Ç–∏–∫–∞':
                    if data.get_data(user_id, chat_id, 'user_data', 'under_level') < 5:
                        await bot.send_message(chat_id, f"–°–ø–æ—á–∞—Ç–∫—É –≤–∏ –º–∞—î—Ç–µ –¥–æ—Å—è–≥–Ω—É—Ç–∏ 5 —Ä—ñ–≤–Ω—è")
                    else:
                        await send_cat_job(user_id, chat_id)
                elif message.text == '–û–±—Ä–∞—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ—é':
                    if data.get_data(user_id, chat_id, 'user_data', 'under_level') < 5:
                        await bot.send_message(chat_id, f"–°–ø–æ—á–∞—Ç–∫—É –≤–∏ –º–∞—î—Ç–µ –¥–æ—Å—è–≥–Ω—É—Ç–∏ 5 —Ä—ñ–≤–Ω—è")
                    elif job == '–ù–µ–º–∞':
                        clas = data.get_data(user_id, chat_id, 'user_data', 'class')
                        if clas in ['–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫', '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫', '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫',
                                    '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫', '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω']:
                            await bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ñ–µ—Å—ñ—é", reply_markup=jobs_choice[clas])
                        else:
                            await bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ñ–µ—Å—ñ—é", reply_markup=CatJobs5)
                    else:
                        await bot.send_message(chat_id, "–í–∏ –≤–∂–µ –æ–±—Ä–∞–ª–∏ –ø—Ä–æ—Ñ–µ—Å—ñ—é!")
                elif message.text == '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏':
                    if job == '–ù–µ–º–∞':
                        await bot.send_message(chat_id, "–í–∏ —â–µ –Ω–µ –æ–±—Ä–∞–ª–∏ –ø—Ä–æ—Ñ–µ—Å—ñ—é!")
                    else:
                        if job_status == '–ù–µ –ø—Ä–∞—Ü—é—î':
                            await data.start_working(user_id, chat_id)
                            await bot.send_message(chat_id,
                                                   f"{user_name} –ø—ñ—à–æ–≤(-–ª–∞) –ø—Ä–∞—Ü—é–≤–∞—Ç–∏! –†–æ–±–æ—á–∞ –∑–º—ñ–Ω–∞ –∑–∞–∫—ñ–Ω—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ 4 –≥–æ–¥–∏–Ω–∏.")
                        elif job_status == '–£ –≤—ñ–¥–ø—É—Å—Ç—Ü—ñ':
                            await bot.send_message(chat_id, f"{user_name} —É –≤—ñ–¥–ø—É—Å—Ç—Ü—ñ —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–∑ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏!")
                        elif job_status == '–ù–∞ –ø–µ–Ω—Å—ñ—ó':
                            await bot.send_message(chat_id, f"{user_name} –Ω–∞ –ø–µ–Ω—Å—ñ—ó —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–∑ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏!")
                        else:
                            await bot.send_message(chat_id, f"{user_name} –≤–∂–µ –ø—Ä–∞—Ü—é—î!")
                elif message.text == '–ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ—é':
                    under_level = data.get_data(user_id, chat_id, 'user_data', 'under_level')
                    if job == '–ù–µ–º–∞':
                        await bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ–º–∞—î —Ä–æ–±–æ—Ç–∏. –°–ø–æ—á–∞—Ç–∫—É –ø–æ—á–Ω—ñ—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏!")
                    elif under_level < 15:
                        await bot.send_message(chat_id, "–°–ø–æ—á–∞—Ç–∫—É –≤–∞—à –∫–æ—Ç–∏–∫ –º–∞—î –¥–æ—Å—è–≥–Ω—É—Ç–∏ 15 —Ä—ñ–≤–Ω—è!")
                    elif job_status == '–£ –≤—ñ–¥–ø—É—Å—Ç—Ü—ñ':
                        await bot.send_message(chat_id, f"{user_name} —É –≤—ñ–¥–ø—É—Å—Ç—Ü—ñ, –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ä–æ–±–æ—Ç—É!")
                    elif job_status == '–ù–∞ –ø–µ–Ω—Å—ñ—ó':
                        await bot.send_message(chat_id, f"{user_name} –Ω–∞ –ø–µ–Ω—Å—ñ—ó, –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ä–æ–±–æ—Ç—É!")
                    elif job_status == '–ù–∞ —Ä–æ–±–æ—Ç—ñ':
                        await bot.send_message(chat_id,
                                               f"{user_name} –∑–∞—Ä–∞–∑ –ø—Ä–∞—Ü—é—î, —Å–ø–æ—á–∞—Ç–∫—É –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ä–æ–±–æ—á–æ—ó –∑–º—ñ–Ω–∏!")
                    else:
                        job_changes = data.get_data(user_id, chat_id, 'job_data', 'job_changes')
                        if job_changes > 0:
                            clas = data.get_data(user_id, chat_id, 'user_data', 'class')
                            if clas in ['–î–æ–º–∞—à–Ω—ñ–π –∫—ñ—Ç–∏–∫', '–°–ø–ª—è—á–∏–π –∫—ñ—Ç–∏–∫', '–ì—Ä–∞–π–ª–∏–≤–∏–π –∫—ñ—Ç–∏–∫',
                                        '–ë–æ–π–æ–≤–∏–π –∫—ñ—Ç–∏–∫', '–ö—ñ—Ç–∏–∫ –≥—É—Ä–º–∞–Ω']:
                                await bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –ø—Ä–æ—Ñ–µ—Å—ñ—é", reply_markup=jobs_choice[clas])
                            else:
                                await bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –ø—Ä–æ—Ñ–µ—Å—ñ—é", reply_markup=CatJobs5)
                        else:
                            if 15 <= under_level < 25:
                                await bot.send_message(chat_id, "–í–∏ –≤–∂–µ –∑–º—ñ–Ω–∏–ª–∏ —Ä–æ–±–æ—Ç—É, –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä–∞–∑ –º–æ–∂–Ω–∞ "
                                                                "–±—É–¥–µ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏ –ø—ñ—Å–ª—è 25 —Ä—ñ–≤–Ω—è!")
                            elif 25 <= under_level < 35:
                                await bot.send_message(chat_id, "–í–∏ –≤–∂–µ –∑–º—ñ–Ω–∏–ª–∏ —Ä–æ–±–æ—Ç—É, –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä–∞–∑ –º–æ–∂–Ω–∞ "
                                                                "–±—É–¥–µ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏ –ø—ñ—Å–ª—è 35 —Ä—ñ–≤–Ω—è!")
                            elif 35 <= under_level < 45:
                                await bot.send_message(chat_id, "–í–∏ –≤–∂–µ –∑–º—ñ–Ω–∏–ª–∏ —Ä–æ–±–æ—Ç—É, –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä–∞–∑ –º–æ–∂–Ω–∞ "
                                                                "–±—É–¥–µ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏ –ø—ñ—Å–ª—è 45 —Ä—ñ–≤–Ω—è!")
                            else:
                                await bot.send_message(chat_id, "–í–∏ –±—ñ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ä–æ–±–æ—Ç—É")
                elif message.text == '–ü–æ—ó—Ö–∞—Ç–∏ —É –≤—ñ–¥–ø—É—Å—Ç–∫—É':
                    if job == '–ù–µ–º–∞':
                        await bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ–º–∞—î —Ä–æ–±–æ—Ç–∏. –°–ø–æ—á–∞—Ç–∫—É –ø–æ—á–Ω—ñ—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏!")
                    elif job_status == '–£ –≤—ñ–¥–ø—É—Å—Ç—Ü—ñ':
                        await bot.send_message(chat_id, f"{user_name} –≤–∂–µ —É –≤—ñ–¥–ø—É—Å—Ç—Ü—ñ!")
                    elif job_status == '–ù–∞ –ø–µ–Ω—Å—ñ—ó':
                        await bot.send_message(chat_id, f"{user_name} –Ω–∞ –ø–µ–Ω—Å—ñ—ó, –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—ó—Ö–∞—Ç–∏ —É –≤—ñ–¥–ø—É—Å—Ç–∫—É!")
                    elif job_status == '–ù–∞ —Ä–æ–±–æ—Ç—ñ':
                        await bot.send_message(chat_id,
                                               f"{user_name} –∑–∞—Ä–∞–∑ –ø—Ä–∞—Ü—é—î, —Å–ø–æ—á–∞—Ç–∫—É –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ä–æ–±–æ—á–æ—ó –∑–º—ñ–Ω–∏!")
                    else:
                        vacation = data.get_data(user_id, chat_id, 'job_data', 'vacation')
                        need_hours = 100 * (vacation + 1)
                        if data.get_data(user_id, chat_id, 'job_data', 'job_hours') < need_hours:
                            await bot.send_message(chat_id, f"{user_name} –º–∞—î —Å–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ {need_hours} –≥–æ–¥–∏–Ω")
                        else:
                            await data.change_command(user_id, chat_id, '–í—ñ–¥–ø—É—Å—Ç–∫–∞')
                            await bot.send_message(chat_id,
                                                   "–ù–∞ —Å–∫—ñ–ª—å–∫–∏ –¥–æ–≤–≥–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ—ó—Ö–∞—Ç–∏? –ù–∞–ø–∏—à—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ "
                                                   "(–º–∞–∫—Å–∏–º—É–º 5)")
                elif message.text == '–ü—ñ—Ç–∏ –Ω–∞ –ø–µ–Ω—Å—ñ—é':
                    if job == '–ù–µ–º–∞':
                        await bot.send_message(chat_id, f"–£ {user_name} –Ω–µ–º–∞—î —Ä–æ–±–æ—Ç–∏. –°–ø–æ—á–∞—Ç–∫—É –ø–æ—á–Ω—ñ—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏!")
                    elif data.get_data(user_id, chat_id, 'user_data', 'under_level') < 40:
                        await bot.send_message(chat_id, f"–°–ø–æ—á–∞—Ç–∫—É {user_name} –º–∞—î –¥–æ—Å—è–≥–Ω—É—Ç–∏ 40 —Ä—ñ–≤–Ω—è!")
                    elif data.get_data(user_id, chat_id, 'job_data', 'job_hours') < 500:
                        await bot.send_message(chat_id, f"{user_name} –º–∞—î —Å–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ 500 –≥–æ–¥–∏–Ω")
                    elif job_status == '–ù–∞ –ø–µ–Ω—Å—ñ—ó':
                        await bot.send_message(chat_id, f"{user_name} –≤–∂–µ –Ω–∞ –ø–µ–Ω—Å—ñ—ó!")
                    elif job_status == '–£ –≤—ñ–¥–ø—É—Å—Ç—Ü—ñ':
                        await bot.send_message(chat_id,
                                               f"{user_name} —É –≤—ñ–¥–ø—É—Å—Ç—Ü—ñ, —Å–ø–æ—á–∞—Ç–∫—É –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –≤—ñ–¥–ø—É—Å—Ç–∫–∏!")
                    elif job_status == '–ù–∞ —Ä–æ–±–æ—Ç—ñ':
                        await bot.send_message(chat_id,
                                               f"{user_name} –∑–∞—Ä–∞–∑ –ø—Ä–∞—Ü—é—î, —Å–ø–æ—á–∞—Ç–∫—É –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ä–æ–±–æ—á–æ—ó –∑–º—ñ–Ω–∏!")
                    else:
                        await data.pension(user_id, chat_id)
                        await bot.send_message(chat_id, "–í–∏ –∑–∞—Å–ª—É–∂–∏–ª–∏ –Ω–∞ –≥–∞—Ä–Ω–∏–π –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫ –ø—ñ—Å–ª—è —Ç—è–∂–∫–æ—ó –ø—Ä–∞—Ü—ñ! "
                                                        f"–ë—ñ–ª—å—à–µ –≤–∞–º –Ω–µ –¥–æ–≤–µ–¥–µ—Ç—å—Å—è –ø—Ä–æ—Ü—é–≤–∞—Ç–∏")


@dp.message_handler(text_startswith="–ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è –Ω–∞ ")
async def change_name(message: types.Message):
    user_id, chat_id = message.from_user.id, message.chat.id
    message.text = message.text.replace(f"–ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è –Ω–∞ ", "")
    message.text = message.text.replace("\n", "")
    if message.chat.type in ['group', 'supergroup'] and data.user_exist(user_id, chat_id) == 1:
        kill_ever = data.get_data(user_id, chat_id, 'user_data', 'kill_ever')
        if kill_ever == 2:
            await bot.send_message(chat_id, "–í–±–∏–≤—Ü—è–º –Ω–µ –¥–∞–≤–∞–ª–∏ —Å–ª–æ–≤–∞üò°")
        elif kill_ever == 3:
            await bot.send_message(chat_id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è, –±–æ –≤–∞—à –∫–æ—Ç–∏–∫ –≤–º–µ—Ä –∑ –≥–æ–ª–æ–¥—É")
        else:
            name_sets = data.get_data(user_id, chat_id, 'user_data', 'name_sets')
            if name_sets > 0:
                if len(message.text) > 30:
                    await bot.send_message(chat_id, "–Ü–º'—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
                elif message.text == data.get_data(user_id, chat_id, 'user_data', 'name'):
                    await bot.send_message(chat_id, "–í–∞—à –∫–æ—Ç–∏–∫ –≤–∂–µ –º–∞—î —Ü–µ —ñ–º'—è, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
                elif data.name_exist(chat_id, message.text) == 1:
                    await bot.send_message(chat_id, "–Ü–º'—è –≤–∂–µ –∑–∞–π–Ω—è—Ç–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
                else:
                    await data.set_name(user_id, chat_id, message.text)
                    await bot.send_message(chat_id, f"–Ü–º'—è –∫–æ—Ç–∏–∫–∞ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {message.text}. (–ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ {name_sets} {rz[name_sets]})")
            else:
                await bot.send_message(chat_id, "–í–∏ –±—ñ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —ñ–º'—è —Å–≤–æ–≥–æ –∫–æ—Ç–∏–∫–∞")


@dp.message_handler(text_startswith="–ó–∞–≤–µ—Å—Ç–∏ —Å—ñ–º'—é –∑ ")
async def family(message: types.Message):
    user_id, chat_id = message.from_user.id, message.chat.id
    message.text = message.text.replace(f"–ó–∞–≤–µ—Å—Ç–∏ —Å—ñ–º'—é –∑ ", "")
    message.text = message.text.replace("\n", "")
    if message.chat.type in ['group', 'supergroup'] and data.user_exist(user_id, chat_id) == 1:
        kill_ever = data.get_data(user_id, chat_id, 'user_data', 'kill_ever')
        if kill_ever == 2:
            await bot.send_message(chat_id, "–í–±–∏–≤—Ü—è–º –Ω–µ –¥–∞–≤–∞–ª–∏ —Å–ª–æ–≤–∞üò°")
        elif kill_ever == 3:
            await bot.send_message(chat_id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Å—Ç–∏ —Å—ñ–º'—é, –±–æ –≤–∞—à –∫–æ—Ç–∏–∫ –≤–º–µ—Ä –∑ –≥–æ–ª–æ–¥—É")
        elif data.get_data(user_id, chat_id, 'user_data', 'under_level') < 10:
            await bot.send_message(chat_id, f"–°–ø–æ—á–∞—Ç–∫—É –≤–∏ –º–∞—î –¥–æ—Å—è–≥–Ω—É—Ç–∏ 15 —Ä—ñ–≤–Ω—è!")
        elif data.get_data(user_id, chat_id, 'user_data', 'married') == 1:
            await bot.send_message(chat_id, f"–í–∏ –≤–∂–µ –º–∞—î—Ç–µ —Å—ñ–º'—é")
        elif data.name_exist(chat_id, message.text) == 1:
            user_name = data.get_data(user_id, chat_id, 'user_data', 'name')
            user2_id = data.get_user2_id(chat_id, message.text)
            user2_name = message.text
            if message.text == user_name:
                await bot.send_message(chat_id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ–¥—Ä—É–∂–∏—Ç–∏—Å—å —Å–∞–º—ñ –Ω–∞ —Å–æ–±—ñ")
            elif data.get_data(user2_id, chat_id, 'user_data', 'under_level') < 10:
                await bot.send_message(chat_id, "–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –º–∞—î –±—É—Ç–∏ 15 —Ä—ñ–≤–Ω—è!")
            elif data.get_data(user2_id, chat_id, 'user_data', 'married') == 1:
                await bot.send_message(chat_id, "–¶–µ–π –∫–æ—Ç–∏–∫ –≤–∂–µ —É —à–ª—é–±—ñ")
            else:
                await bot.send_message(chat_id, f"{user2_name}, –í–∏ –∑–≥–æ–¥–Ω—ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å—ñ–º'—é –∑ "
                                                f"{user_name}? (–¢–∞–∫/–ù—ñ)")
                await data.change_command(user_id, chat_id, '–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è')
                await data.change_command(user2_id, chat_id, '–£–∑–≥–æ–¥–∂–µ–Ω–Ω—è –≤–µ—Å—ñ–ª–ª—è')
                await data.change_command_user2_id(user2_id, chat_id, user_id)
        else:
            await bot.send_message(chat_id,
                                   "–£ —Ü—å–æ–º—É —á–∞—Ç—ñ —Ç–∞–∫–æ–≥–æ –∫–æ—Ç–∏–∫–∞ –Ω–µ —ñ—Å–Ω—É—î, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –Ω–∞–ø–∏—Å–∞—Ç–∏ —ñ–º'—è")


@dp.message_handler(text_startswith="–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ ")
async def invitation(message: types.Message):
    user_id, chat_id = message.from_user.id, message.chat.id
    message.text = message.text.replace(f"–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ ", "")
    message.text = message.text.replace("\n", "")
    if message.chat.type in ['group', 'supergroup'] and data.user_exist(user_id, chat_id) == 1:
        kill_ever = data.get_data(user_id, chat_id, 'user_data', 'kill_ever')
        if kill_ever == 2:
            await bot.send_message(chat_id, "–í–±–∏–≤—Ü—è–º –Ω–µ –¥–∞–≤–∞–ª–∏ —Å–ª–æ–≤–∞üò°")
        elif kill_ever == 3:
            await bot.send_message(chat_id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ —É –∫–≤–∞—Ä—Ç–∏—Ä—É, –±–æ –≤–∞—à –∫–æ—Ç–∏–∫ –≤–º–µ—Ä –∑ –≥–æ–ª–æ–¥—É")
        elif data.apartment_exist(user_id, chat_id) == 0:
            await bot.send_message(chat_id, "–°–ø–æ—á–∞—Ç–∫—É –≤–∏ –º–∞—î—Ç–µ –∫—É–ø–∏—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É", reply_markup=NewApartment)
        elif data.get_data(user_id, chat_id, 'apartment_data', 'user1_id') != 0 and \
                data.get_data(user_id, chat_id, 'apartment_data', 'user2_id') != 0 and \
                data.get_data(user_id, chat_id, 'apartment_data', 'user3_id') != 0 and \
                data.get_data(user_id, chat_id, 'apartment_data', 'user4_id') != 0 and \
                data.get_data(user_id, chat_id, 'apartment_data', 'user5_id') != 0:
            await bot.send_message(chat_id, "–í–∞—à–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞ –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–∞")
        elif data.name_exist(chat_id, message.text) == 1:
            user_name = data.get_data(user_id, chat_id, 'user_data', 'name')
            user2_id = data.get_user2_id(chat_id, message.text)
            user2_name = message.text
            if message.text != user_name:
                for j in range(5):
                    if data.get_data(user_id, chat_id, 'apartment_data', f'user{j + 1}_id') == user2_id:
                        await bot.send_message(chat_id, f"{user2_name} –≤–∂–µ –∂–∏–≤–µ —É –≤–∞—à—ñ–π –∫–≤–∞—Ä—Ç–∏—Ä—ñ")
                        break
                else:
                    if data.user_in_all_apartments_exist(user2_id, chat_id) != 0:
                        await bot.send_message(chat_id, f"{user2_name} –≤–∂–µ –ø—Ä–æ–∂–∏–≤–∞—î —É —á–∏–π—Å—å –∫–≤–∞—Ä—Ç–∏—Ä—ñ")
                    else:
                        await bot.send_message(chat_id, f"{user2_name}, –í–∏ –∑–≥–æ–¥–Ω—ñ –∂–∏—Ç–∏ –≤ –æ–¥–Ω—ñ–π –∫–≤–∞—Ä—Ç–∏—Ä—ñ –∑ "
                                                        f"{user_name}? (–¢–∞–∫/–ù—ñ)")
                        await data.change_command(user_id, chat_id, '–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è')
                        await data.change_command(user2_id, chat_id, '–£–∑–≥–æ–¥–∂–µ–Ω–Ω—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è')
                        await data.change_command_user2_id(user2_id, chat_id, user_id)
            else:
                await bot.send_message(chat_id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ —Å–∞–º—ñ —Å–µ–±–µ")
        else:
            await bot.send_message(chat_id,
                                   "–£ —Ü—å–æ–º—É —á–∞—Ç—ñ —Ç–∞–∫–æ–≥–æ –∫–æ—Ç–∏–∫–∞ –Ω–µ —ñ—Å–Ω—É—î, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –Ω–∞–ø–∏—Å–∞—Ç–∏ —ñ–º'—è")


@dp.message_handler(text_startswith="–í–∏—Å–µ–ª–∏—Ç–∏ ")
async def remove(message: types.Message):
    user_id, chat_id = message.from_user.id, message.chat.id
    message.text = message.text.replace(f"–í–∏—Å–µ–ª–∏—Ç–∏ ", "")
    message.text = message.text.replace("\n", "")
    if message.chat.type in ['group', 'supergroup'] and data.user_exist(user_id, chat_id) == 1:
        kill_ever = data.get_data(user_id, chat_id, 'user_data', 'kill_ever')
        if kill_ever == 2:
            await bot.send_message(chat_id, "–í–±–∏–≤—Ü—è–º –Ω–µ –¥–∞–≤–∞–ª–∏ —Å–ª–æ–≤–∞üò°")
        elif kill_ever == 3:
            await bot.send_message(chat_id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏—Å–µ–ª—è—Ç–∏ –∑ –∫–≤–∞—Ä—Ç–∏—Ä–∏, –±–æ –≤–∞—à –∫–æ—Ç–∏–∫ –≤–º–µ—Ä –∑ –≥–æ–ª–æ–¥—É")
        elif data.apartment_exist(user_id, chat_id) == 0:
            await bot.send_message(chat_id, "–°–ø–æ—á–∞—Ç–∫—É –≤–∏ –º–∞—î—Ç–µ –∫—É–ø–∏—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É", reply_markup=NewApartment)
        elif data.get_data(user_id, chat_id, 'apartment_data', 'user1_id') == 0 and \
                data.get_data(user_id, chat_id, 'apartment_data', 'user2_id') == 0 and \
                data.get_data(user_id, chat_id, 'apartment_data', 'user3_id') == 0 and \
                data.get_data(user_id, chat_id, 'apartment_data', 'user4_id') == 0 and \
                data.get_data(user_id, chat_id, 'apartment_data', 'user5_id') == 0:
            await bot.send_message(chat_id, "–í–∞—à–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞ –ø—É—Å—Ç–∞, –≤–∞–º –Ω—ñ–∫–æ–≥–æ –≤–∏—Å–µ–ª—è—Ç–∏")
        elif data.name_exist(chat_id, message.text) == 1:
            user2_id = data.get_user2_id(chat_id, message.text)
            user2_name = message.text
            if data.user_in_apartment_exist(user_id, chat_id, user2_id) == 0:
                await bot.send_message(chat_id, f"{user2_name} —ñ —Ç–∞–∫ –Ω–µ –ø—Ä–æ–∂–∏–≤–∞—î —É –≤–∞—à—ñ–π –∫–≤–∞—Ä—Ç–∏—Ä—ñ1")
            else:
                await data.remove_from_apartment(user_id, chat_id, user2_id)
                await bot.send_message(chat_id, f"{user2_name} –±—ñ–ª—å—à–µ –Ω–µ –∂–∏–≤–µ —É –≤–∞—à—ñ–π –∫–≤–∞—Ä—Ç–∏—Ä—ñ!")
        else:
            await bot.send_message(chat_id,
                                   "–£ —Ü—å–æ–º—É —á–∞—Ç—ñ —Ç–∞–∫–æ–≥–æ –∫–æ—Ç–∏–∫–∞ –Ω–µ —ñ—Å–Ω—É—î, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –Ω–∞–ø–∏—Å–∞—Ç–∏ —ñ–º'—è")


@dp.message_handler(text_startswith="–ü–µ—Ä–µ—ó—Ö–∞—Ç–∏ –¥–æ ")
async def change_apartment_(message: types.Message):
    user_id, chat_id = message.from_user.id, message.chat.id
    message.text = message.text.replace(f"–ü–µ—Ä–µ—ó—Ö–∞—Ç–∏ –¥–æ ", "")
    message.text = message.text.replace("\n", "")
    if message.chat.type in ['group', 'supergroup'] and data.user_exist(user_id, chat_id) == 1:
        kill_ever = data.get_data(user_id, chat_id, 'user_data', 'kill_ever')
        if kill_ever == 2:
            await bot.send_message(chat_id, "–í–±–∏–≤—Ü—è–º –Ω–µ –¥–∞–≤–∞–ª–∏ —Å–ª–æ–≤–∞üò°")
        elif kill_ever == 3:
            await bot.send_message(chat_id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—ó—Ö–∞—Ç–∏, –±–æ –≤–∞—à –∫–æ—Ç–∏–∫ –≤–º–µ—Ä –∑ –≥–æ–ª–æ–¥—É")
        elif data.name_exist(chat_id, message.text) == 1:
            user_name = data.get_data(user_id, chat_id, 'user_data', 'name')
            user2_id = data.get_user2_id(chat_id, message.text)
            user2_name = message.text
            if data.apartment_exist(user2_id, chat_id) == 0:
                if user_id != user2_id:
                    await bot.send_message(chat_id, f"–£ {user2_name} –Ω–µ–º–∞—î –∫–≤–∞—Ä—Ç–∏—Ä–∏", reply_markup=NewApartment)
                else:
                    await bot.send_message(chat_id, f"–£ –≤–∞—Å –Ω–µ–º–∞—î –∫–≤–∞—Ä—Ç–∏—Ä–∏", reply_markup=NewApartment)
            elif data.get_data(user2_id, chat_id, 'apartment_data', 'user1_id') != 0 and \
                    data.get_data(user2_id, chat_id, 'apartment_data', 'user2_id') != 0 and \
                    data.get_data(user2_id, chat_id, 'apartment_data', 'user3_id') != 0 and \
                    data.get_data(user2_id, chat_id, 'apartment_data', 'user4_id') != 0 and \
                    data.get_data(user2_id, chat_id, 'apartment_data', 'user5_id') != 0:
                await bot.send_message(chat_id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—ó—Ö–∞—Ç–∏ –±–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞ –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–∞")
            for j in range(5):
                if data.get_data(user2_id, chat_id, 'apartment_data', f'user{j+1}_id') == user_id:
                    if user_id != user2_id:
                        await bot.send_message(chat_id, f"–í–∏ –≤–∂–µ –∂–∏–≤–µ—Ç–µ —É –∫–≤–∞—Ä—Ç–∏—Ä—ñ {user2_name}")
                    else:
                        await bot.send_message(chat_id, f"–í–∏ –≤–∂–µ –∂–∏–≤–µ—Ç–µ —É —Å–≤–æ—ó–π –∫–≤–∞—Ä—Ç–∏—Ä—ñ")
                    break
            else:
                if user_id != user2_id:
                    await bot.send_message(chat_id, f"{user2_name}, –í–∏ –∑–≥–æ–¥–Ω—ñ –∂–∏—Ç–∏ —â–æ–± "
                                                    f"{user_name} –∂–∏–≤ —É –≤–∞—à—ñ–π –∫–≤–∞—Ä—Ç–∏—Ä—ñ? (–¢–∞–∫/–ù—ñ)")
                    await data.change_command(user_id, chat_id, '–ü–µ—Ä–µ—ó–∑–¥')
                    await data.change_command(user2_id, chat_id, '–£–∑–≥–æ–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ—ó–∑–¥—É')
                    await data.change_command_user2_id(user2_id, chat_id, user_id)
                else:
                    await data.change_apartment(user_id, chat_id, user_id)
                    await bot.send_message(chat_id, "–í–∏ –ø–µ—Ä–µ—ó—Ö–∞–ª–∏ –¥–æ —Å–µ–±–µ")
        else:
            await bot.send_message(chat_id,
                                   "–£ —Ü—å–æ–º—É —á–∞—Ç—ñ —Ç–∞–∫–æ–≥–æ –∫–æ—Ç–∏–∫–∞ –Ω–µ —ñ—Å–Ω—É—î, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –Ω–∞–ø–∏—Å–∞—Ç–∏ —ñ–º'—è")


@dp.message_handler()
async def do(message: types.Message):
    user_id, chat_id = message.from_user.id, message.chat.id
    if message.chat.type in ['group', 'supergroup'] and data.user_exist(user_id, chat_id) == 1:
        command = data.get_data(user_id, chat_id, 'user_data', 'command')
        if command != '':
            message.text = message.text.replace("\n", "")
            user_name = data.get_data(user_id, chat_id, 'user_data', 'name')
            user2_id = data.get_data(user_id, chat_id, 'user_data', 'user2_id')
            user2_name = ''
            if user2_id != 0:
                user2_name = data.get_data(user2_id, chat_id, 'user_data', 'name')
            if command == "–ù–æ–≤–µ —ñ–º'—è":
                if len(message.text) > 30:
                    await bot.send_message(chat_id, "–Ü–º'—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
                elif data.name_exist(chat_id, message.text) == 1:
                    await bot.send_message(chat_id, "–Ü–º'—è –≤–∂–µ –∑–∞–π–Ω—è—Ç–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
                else:
                    await data.set_name(user_id, chat_id, message.text)
                    await data.clear_command(user_id, chat_id)
                    await send_cat_data(user_id, chat_id)
            elif command == '–í–±–∏—Ç–∏ –∫–æ—Ç–∏–∫–∞':
                if message.text == 'T–∞–∫, —è —Ö–æ—á—É –≤–±–∏—Ç–∏ —Å–≤–æ–≥–æ –∫–æ—Ç–∏–∫–∞':
                    await data.kill(user_id, chat_id, 'kill')
                    await bot.send_message(chat_id, "–ù–µ–ª—é–¥! –¢–∏ —Ç—ñ–ª—å–∫–∏ —â–æ –≤–±–∏–≤ –Ω–∞–π–º–∏–ª—ñ—à–µ —Å—Ç–≤–æ—Ä—ñ–Ω–Ω—è –Ω–∞ –∑–µ–º–ª—ñüò°")
                elif message.text == '–ù—ñ':
                    await data.kill(user_id, chat_id, 'wanted')
                    await bot.send_message(chat_id, "–Ø–∫ –¥–æ–±—Ä–µ, —â–æ –≤–∏ –æ–¥—É–º–∞–ª–∏—Å—å, –∞–ª–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –≤—Å–µ –ø–∞–º'—è—Ç–∞—î!")
                await data.clear_command(user_id, chat_id)
            elif command == '–í—ñ–¥–ø—É—Å—Ç–∫–∞':
                if message.text not in [f"{j+1}" for j in range(5)]:
                    await bot.send_message(chat_id, "–ù–µ –≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω–Ω—ñ, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
                else:
                    await data.vacation_days(user_id, chat_id, int(message.text))
                    await data.change_command(user_id, chat_id, '–ú—ñ—Å—Ü–µ –≤—ñ–¥–ø—É—Å—Ç–∫–∏')
                    await bot.send_message(chat_id, "–ö—É–¥–∏ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ—ó—Ö–∞—Ç–∏?")
            elif command == '–ú—ñ—Å—Ü–µ –≤—ñ–¥–ø—É—Å—Ç–∫–∏':
                await data.vacation(user_id, chat_id, message.text)
                days = int(data.get_data(user_id, chat_id, 'job_data', 'vacation_hours')/24)
                place = data.get_data(user_id, chat_id, 'job_data', 'vacation_place')
                await data.clear_command(user_id, chat_id)
                await bot.send_message(chat_id, f"{user_name} –ø–æ—ó—Ö–∞–≤ —É –≤—ñ–¥–ø—É—Å—Ç–∫—É –Ω–∞ {days} –¥–Ω—ñ–≤ —É {place}")
            elif command == '–£–∑–≥–æ–¥–∂–µ–Ω–Ω—è –≤–µ—Å—ñ–ª–ª—è':
                user2_id = data.get_data(user_id, chat_id, 'user_data', 'command_user2_id')
                user2_name = data.get_data(user2_id, chat_id,  'user_data', 'name')
                if message.text == '–¢–∞–∫':
                    await data.married(chat_id, user_id, user2_id)
                    await data.married(chat_id, user2_id, user_id)
                    await data.clear_command(user_id, chat_id)
                    await data.clear_command(user2_id, chat_id)
                    await bot.send_message(chat_id, f"{user_name} —Ç–µ–ø–µ—Ä –æ—Ñ—ñ—Ü—ñ–π–Ω–æ —É —à–ª—é–±—ñ –∑ {user2_name}")
                elif message.text == '–ù—ñ':
                    await data.clear_command(user_id, chat_id)
                    await data.clear_command(user2_id, chat_id)
                    await bot.send_message(chat_id, f"{user2_name}, –Ω–∞ –∂–∞–ª—å {user_name} –≤—ñ–¥–º–æ–≤–∏–≤(-–ª–∞) –≤–∞–º")
            elif command == '–†–æ–∑–ª—É—á–µ–Ω–Ω—è':
                if message.text == '–ù—ñ':
                    await data.clear_command(user_id, chat_id)
                    await bot.send_message(chat_id, "–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ —Ä–æ–∑–ª—É—á–µ–Ω–Ω—è!")
                elif message.text == '–¢–∞–∫':
                    await bot.send_message(chat_id, f"{user2_name}, –í–∏ –∑–≥–æ–¥–Ω—ñ —Ä–æ–∑–ª—É—á–∏—Ç–∏—Å—å –∑ {user_name}? (–¢–∞–∫/–ù—ñ)")
                    await data.change_command(user2_id, chat_id, '–£–∑–≥–æ–¥–∂–µ–Ω–Ω—è —Ä–æ–∑–ª—É—á–µ–Ω–Ω—è')
                    await data.change_command_user2_id(user2_id, chat_id, user_id)
            elif command == '–£–∑–≥–æ–¥–∂–µ–Ω–Ω—è —Ä–æ–∑–ª—É—á–µ–Ω–Ω—è':
                if message.text == '–¢–∞–∫':
                    await data.married_break(chat_id, user_id, user2_id)
                    await data.clear_command(user_id, chat_id)
                    await data.clear_command(user2_id, chat_id)
                    await bot.send_message(chat_id, f"{user_name} —ñ {user2_name} –±—ñ–ª—å—à–µ –Ω–µ —É —à–ª—é–±—ñ")
                elif message.text == '–ù—ñ':
                    await data.clear_command(user_id, chat_id)
                    await data.clear_command(user2_id, chat_id)
                    await bot.send_message(chat_id, f"{user_name}, –Ω–∞ –∂–∞–ª—å {user2_name} –≤—ñ–¥–º–æ–≤–∏–≤(-–ª–∞) –≤–∞–º")
            elif command == '–£–∑–≥–æ–¥–∂–µ–Ω–Ω—è –∫–æ—à–µ–Ω—è—Ç–æ–∫':
                if message.text == '–¢–∞–∫':
                    await data.kittens(chat_id, user_id, user2_id)
                    await data.clear_command(user_id, chat_id)
                    await data.clear_command(user2_id, chat_id)
                    await bot.send_message(chat_id, f"{user_name} —ñ {user2_name} —Ç–µ–ø–µ—Ä –º–∞—é—Ç—å –º–∏–ª–∏—Ö –∫–æ—à–µ–Ω—è—Ç!",
                                           reply_markup=KittensData)
                elif message.text == '–ù—ñ':
                    await data.clear_command(user_id, chat_id)
                    await data.clear_command(user2_id, chat_id)
                    await bot.send_message(chat_id, f"{user_name}, –Ω–∞ –∂–∞–ª—å {user2_name} –≤—ñ–¥–º–æ–≤–∏–≤(-–ª–∞) –≤–∞–º")
            elif command == '–£–∑–≥–æ–¥–∂–µ–Ω–Ω—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è':
                user2_id = data.get_data(user_id, chat_id, 'user_data', 'command_user2_id')
                user2_name = data.get_data(user2_id, chat_id,  'user_data', 'name')
                if message.text == '–¢–∞–∫':
                    await data.add_user_to_apartment(user2_id, chat_id, user_id)
                    await data.clear_command(user_id, chat_id)
                    await data.clear_command(user2_id, chat_id)
                    await bot.send_message(chat_id, f"{user_name} —Ç–µ–ø–µ—Ä –∂–∏–≤–µ –∑ {user2_name}")
                elif message.text == '–ù—ñ':
                    await data.clear_command(user_id, chat_id)
                    await data.clear_command(user2_id, chat_id)
                    await bot.send_message(chat_id, f"{user2_name}, –Ω–∞ –∂–∞–ª—å {user_name} –≤—ñ–¥–º–æ–≤–∏–≤(-–ª–∞) –≤–∞–º")
            elif command == '–£–∑–≥–æ–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ—ó–∑–¥—É':
                user2_id = data.get_data(user_id, chat_id, 'user_data', 'command_user2_id')
                user2_name = data.get_data(user2_id, chat_id,  'user_data', 'name')
                if message.text == '–¢–∞–∫':
                    await data.change_apartment(user_id, chat_id, user2_id)
                    await data.change_command(user_id, chat_id, '')
                    await data.change_command_user2_id(user2_id, chat_id, 0)
                    await data.change_command(user2_id, chat_id, '')
                    await bot.send_message(chat_id, f"{user2_name} —Ç–µ–ø–µ—Ä –∂–∏–≤–µ —É –∫–≤–∞—Ä—Ç–∏—Ä—ñ {user_name}")
                elif message.text == '–ù—ñ':
                    await data.change_command(user_id, chat_id, '')
                    await data.change_command_user2_id(user2_id, chat_id, 0)
                    await data.change_command(user2_id, chat_id, '')
                    await bot.send_message(chat_id, f"{user2_name}, –Ω–∞ –∂–∞–ª—å {user_name} –≤—ñ–¥–º–æ–≤–∏–≤(-–ª–∞) –≤–∞–º")


@dp.callback_query_handler(text_contains='job')
async def job_choice(call: types.CallbackQuery):
    user_id, chat_id = call.from_user.id, call.message.chat.id
    under_level = data.get_data(user_id, chat_id, 'user_data', 'under_level')
    clas = data.get_data(user_id, chat_id, 'user_data', 'class')
    job = data.get_data(user_id, chat_id, 'job_data', 'job')
    job_changes = data.get_data(user_id, chat_id, 'job_data', 'job_changes')
    if under_level >= 5 and (job == '–ù–µ–º–∞' or job_changes > 0) and \
            ((clas in classes and call.data[4:] in jobs[clas]) or (clas not in classes and call.data[4:] in extra_jobs)):
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await data.change_job(user_id, chat_id, call.data[4:])
        await data.change_job_changes(user_id, chat_id, '-')
        await bot.send_message(call.message.chat.id, f"–í–∏ –æ–±—Ä–∞–ª–∏ –ø—Ä–æ—Ñ–µ—Å—ñ—é - {call.data[4:]}.")


async def allways():
    while True:
        if time.strftime("%S") == "00":
            await data.all_feed()
            await data.all_wanna_play()
            await data.all_hungry()
            await data.all_job()
            await data.all_stop_working()
            await data.not_doing()
        await asyncio.sleep(1)

if __name__ == '__main__':
    data.init_db()
    asyncio.gather(allways())
    asyncio.gather(executor.start_polling(dp, skip_updates=True))
